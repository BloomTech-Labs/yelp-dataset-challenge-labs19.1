{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' This notebook is better run on a GPU '''\n",
    "''' Imports and such '''\n",
    "''' The essentials '''\n",
    "import pandas as pd \n",
    "import numpy as np \n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import Counter\n",
    "\n",
    "''' Base stuff '''\n",
    "import os\n",
    "import re\n",
    "\n",
    "''' Gensim Stuff '''\n",
    "import gensim\n",
    "from gensim.utils import simple_preprocess\n",
    "from gensim.parsing.preprocessing import STOPWORDS\n",
    "from gensim import corpora \n",
    "from gensim.models.ldamulticore import LdaMulticore\n",
    "#from gensim.models import LdaMulticore\n",
    "from gensim.corpora import Dictionary\n",
    "import pyLDAvis.gensim\n",
    "\n",
    "''' Vectorizers '''\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from gensim.models import Word2Vec\n",
    "from nltk.stem import SnowballStemmer\n",
    "\n",
    "''' Pipeline '''\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import GridSearchCV, train_test_split\n",
    "from sklearn.decomposition import TruncatedSVD\n",
    "from sklearn.linear_model import SGDClassifier, SGDRegressor \n",
    "\n",
    "''' Ensemble Stuff '''\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "''' KNN '''\n",
    "from sklearn.neighbors import NearestNeighbors\n",
    "\n",
    "''' PreProcessing '''\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
    "\n",
    "''' TensorFlow Stuff '''\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import Dense, Dropout, LSTM, Embedding, Conv1D, MaxPooling1D, Activation\n",
    "from tensorflow.keras import Sequential\n",
    "from tensorflow.keras.utils import to_categorical, get_file\n",
    "from tensorflow.keras.preprocessing import sequence #one_hot, hashing_trick\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bringing in the Data and such + Cleaning and what not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5261668, 9)\n"
     ]
    }
   ],
   "source": [
    "''' Ringing in the Data '''\n",
    "\n",
    "reviews_df = pd.read_csv('yelp_review.csv', engine='python', error_bad_lines=False)\n",
    "business_df = pd.read_csv('yelp_business.csv')\n",
    "#tips_df = pd.read_csv('yelp_tip.csv', engine='python', error_bad_lines=False)\n",
    "#attributes_df = pd.read_csv('yelp_business_attributes.csv')\n",
    "\n",
    "print(reviews_df.shape) #, business_df.shape, tips_df.shape, attributes_df.shape)\n",
    "''' Jesus, dem shape sizes '''\n",
    "reviews_df = reviews_df.drop(columns = {'review_id', 'date', 'useful', 'funny', 'cool'})\n",
    "business_df = business_df.drop(columns = {'neighborhood', 'address', 'postal_code', 'latitude', 'longitude', 'is_open', 'categories', 'city', 'state', 'review_count'})\n",
    "business_df = business_df.rename(columns={'stars' : 'rating'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5261668, 4)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>business_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>bv2nCi5Qv5vroFiqKGopiw</td>\n",
       "      <td>AEx2SYEUJmTxVVB18LlCwA</td>\n",
       "      <td>5</td>\n",
       "      <td>Super simple place but amazing nonetheless. It...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>bv2nCi5Qv5vroFiqKGopiw</td>\n",
       "      <td>VR6GpWIda3SfvPC-lg9H3w</td>\n",
       "      <td>5</td>\n",
       "      <td>Small unassuming place that changes their menu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>bv2nCi5Qv5vroFiqKGopiw</td>\n",
       "      <td>CKC0-MOWMqoeWf6s-szl8g</td>\n",
       "      <td>5</td>\n",
       "      <td>Lester's is located in a beautiful neighborhoo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>bv2nCi5Qv5vroFiqKGopiw</td>\n",
       "      <td>ACFtxLv8pGrrxMm6EgjreA</td>\n",
       "      <td>4</td>\n",
       "      <td>Love coming here. Yes the place always needs t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>bv2nCi5Qv5vroFiqKGopiw</td>\n",
       "      <td>s2I_Ni76bjJNK9yG60iD-Q</td>\n",
       "      <td>4</td>\n",
       "      <td>Had their chocolate almond croissant and it wa...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  user_id             business_id  stars  \\\n",
       "0  bv2nCi5Qv5vroFiqKGopiw  AEx2SYEUJmTxVVB18LlCwA      5   \n",
       "1  bv2nCi5Qv5vroFiqKGopiw  VR6GpWIda3SfvPC-lg9H3w      5   \n",
       "2  bv2nCi5Qv5vroFiqKGopiw  CKC0-MOWMqoeWf6s-szl8g      5   \n",
       "3  bv2nCi5Qv5vroFiqKGopiw  ACFtxLv8pGrrxMm6EgjreA      4   \n",
       "4  bv2nCi5Qv5vroFiqKGopiw  s2I_Ni76bjJNK9yG60iD-Q      4   \n",
       "\n",
       "                                                text  \n",
       "0  Super simple place but amazing nonetheless. It...  \n",
       "1  Small unassuming place that changes their menu...  \n",
       "2  Lester's is located in a beautiful neighborhoo...  \n",
       "3  Love coming here. Yes the place always needs t...  \n",
       "4  Had their chocolate almond croissant and it wa...  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(reviews_df.shape)\n",
    "reviews_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(174567, 3)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>FYWN1wneV18bWNgQjJ2GNg</td>\n",
       "      <td>\"Dental by Design\"</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>He-G7vWjzVUysIKrfNbPUQ</td>\n",
       "      <td>\"Stephen Szabo Salon\"</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>KQPW8lFf1y5BT2MxiSZ3QA</td>\n",
       "      <td>\"Western Motor Vehicle\"</td>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>8DShNS-LuFqpEWIp0HxijA</td>\n",
       "      <td>\"Sports Authority\"</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>PfOCPjBrlQAnz__NXj9h_w</td>\n",
       "      <td>\"Brick House Tavern + Tap\"</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              business_id                        name  rating\n",
       "0  FYWN1wneV18bWNgQjJ2GNg          \"Dental by Design\"     4.0\n",
       "1  He-G7vWjzVUysIKrfNbPUQ       \"Stephen Szabo Salon\"     3.0\n",
       "2  KQPW8lFf1y5BT2MxiSZ3QA     \"Western Motor Vehicle\"     1.5\n",
       "3  8DShNS-LuFqpEWIp0HxijA          \"Sports Authority\"     3.0\n",
       "4  PfOCPjBrlQAnz__NXj9h_w  \"Brick House Tavern + Tap\"     3.5"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(business_df.shape)\n",
    "business_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' Merging the DataFrames '''\n",
    "reviews_df = pd.merge(reviews_df, business_df, how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5261668, 6)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>business_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>text</th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>bv2nCi5Qv5vroFiqKGopiw</td>\n",
       "      <td>AEx2SYEUJmTxVVB18LlCwA</td>\n",
       "      <td>5</td>\n",
       "      <td>Super simple place but amazing nonetheless. It...</td>\n",
       "      <td>\"Wilensky's\"</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>xYciRtVZ1PW4IxSX4oJ1aw</td>\n",
       "      <td>AEx2SYEUJmTxVVB18LlCwA</td>\n",
       "      <td>5</td>\n",
       "      <td>*The shop was featured on Mind of a Chef with ...</td>\n",
       "      <td>\"Wilensky's\"</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>5Ymfsf9fAYz-Ds_p0xawVQ</td>\n",
       "      <td>AEx2SYEUJmTxVVB18LlCwA</td>\n",
       "      <td>5</td>\n",
       "      <td>As its name suggests, Wilensky's is a lunch co...</td>\n",
       "      <td>\"Wilensky's\"</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>DVOOF0Z627DyrZ4XKQbTgA</td>\n",
       "      <td>AEx2SYEUJmTxVVB18LlCwA</td>\n",
       "      <td>5</td>\n",
       "      <td>Stopped by for the Wilensky's Special, loved i...</td>\n",
       "      <td>\"Wilensky's\"</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5JoKz3mU42Cp906KRXDwJw</td>\n",
       "      <td>AEx2SYEUJmTxVVB18LlCwA</td>\n",
       "      <td>4</td>\n",
       "      <td>I have to admit, I am a fan. Just entering the...</td>\n",
       "      <td>\"Wilensky's\"</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  user_id             business_id  stars  \\\n",
       "0  bv2nCi5Qv5vroFiqKGopiw  AEx2SYEUJmTxVVB18LlCwA      5   \n",
       "1  xYciRtVZ1PW4IxSX4oJ1aw  AEx2SYEUJmTxVVB18LlCwA      5   \n",
       "2  5Ymfsf9fAYz-Ds_p0xawVQ  AEx2SYEUJmTxVVB18LlCwA      5   \n",
       "3  DVOOF0Z627DyrZ4XKQbTgA  AEx2SYEUJmTxVVB18LlCwA      5   \n",
       "4  5JoKz3mU42Cp906KRXDwJw  AEx2SYEUJmTxVVB18LlCwA      4   \n",
       "\n",
       "                                                text          name  rating  \n",
       "0  Super simple place but amazing nonetheless. It...  \"Wilensky's\"     4.0  \n",
       "1  *The shop was featured on Mind of a Chef with ...  \"Wilensky's\"     4.0  \n",
       "2  As its name suggests, Wilensky's is a lunch co...  \"Wilensky's\"     4.0  \n",
       "3  Stopped by for the Wilensky's Special, loved i...  \"Wilensky's\"     4.0  \n",
       "4  I have to admit, I am a fan. Just entering the...  \"Wilensky's\"     4.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(reviews_df.shape)\n",
    "reviews_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' Getting only the Taco places  '''\n",
    "\n",
    "mask = (reviews_df['text'].str.contains('taco'))\n",
    "reviews_df = reviews_df[mask]\n",
    "tacos_df = reviews_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(121979, 6)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "\" \\nOf those 5 million reviews(lol) roughly 122k deal with places that serve \\ntacos, so we'll start from there\\n\""
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(reviews_df.shape)\n",
    "''' \n",
    "Of those 5 million reviews(lol) roughly 122k deal with places that serve \n",
    "tacos, so we'll start from there\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' \n",
    "Taking smaples of the data so that it's easier to work with, when final \n",
    "model is complete, will comment out this section and run the full notebook\n",
    "'''\n",
    "reviews_df, X_test = train_test_split(reviews_df, train_size = .92, random_state=69)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(112220, 6)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "' Niceeeee we can work with this  '"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(reviews_df.shape)\n",
    "''' Niceeeee we can work with this  '''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stop words, cleaning up text, KNN(bonus)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' Cleaning up the text and preparing for NLP '''\n",
    "STOPWORDS = set(STOPWORDS).union(set(['the', 'aa', 'aaa', 'aaaaaa' ])) # will update as I go further along\n",
    "\n",
    "\n",
    "def tokenize(text): \n",
    "    return [token for token in simple_preprocess(text) if token not in STOPWORDS and len(token) >=3]\n",
    "\n",
    "''' Also throwing in some regex cleaning just for good measure '''\n",
    "def clean(text):\n",
    "    text = re.sub(r\"[^A-Za-z0-9^,!.\\/'+-=]\", \" \", text)\n",
    "    text = re.sub(r\"what's\", \"what is \", text)\n",
    "    text = re.sub(r\"\\'s\", \" \", text)\n",
    "    text = re.sub(r\"\\'ve\", \" have \", text)\n",
    "    text = re.sub(r\"n't\", \" not \", text)\n",
    "    text = re.sub(r\"i'm\", \"i am \", text)\n",
    "    text = re.sub(r\"\\'re\", \" are \", text)\n",
    "    text = re.sub(r\"\\'d\", \" would \", text)\n",
    "    text = re.sub(r\"\\'ll\", \" will \", text)\n",
    "    text = re.sub(r\",\", \" \", text)\n",
    "    text = re.sub(r\"\\.\", \" \", text)\n",
    "    text = re.sub(r\"!\", \" ! \", text)\n",
    "    text = re.sub(r\"\\/\", \" \", text)\n",
    "    text = re.sub(r\"\\^\", \" ^ \", text)\n",
    "    text = re.sub(r\"\\+\", \" + \", text)\n",
    "    text = re.sub(r\"\\-\", \" - \", text)\n",
    "    text = re.sub(r\"\\=\", \" = \", text)\n",
    "    text = re.sub(r\"'\", \" \", text)\n",
    "    text = re.sub(r\"(\\d+)(k)\", r\"\\g<1>000\", text)\n",
    "    text = re.sub(r\":\", \" : \", text)\n",
    "    text = re.sub(r\" e g \", \" eg \", text)\n",
    "    text = re.sub(r\" b g \", \" bg \", text)\n",
    "    text = re.sub(r\" u s \", \" american \", text)\n",
    "    text = re.sub(r\"\\0s\", \"0\", text)\n",
    "    text = re.sub(r\" 9 11 \", \"911\", text)\n",
    "    text = re.sub(r\"e - mail\", \"email\", text)\n",
    "    text = re.sub(r\"j k\", \"jk\", text)\n",
    "    text = re.sub(r\"\\s{2,}\", \" \", text)\n",
    "    text = text.replace('\\n', '')\n",
    "    \n",
    "    text = text.split()\n",
    "    stemmer = SnowballStemmer('english')\n",
    "    stemmed_words = [stemmer.stem(word) for word in text]\n",
    "    text = \" \".join(stemmed_words)\n",
    "\n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n",
      "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "423810     [cosmo, best, restaurants, strip, excited, try...\n",
       "1101674    [ate, lunch, juan, server, tostada, salad, sho...\n",
       "2314731    [team, came, work, dinner, drinks, week, open,...\n",
       "87975      [location, lovely, atmosphere, delightful, ser...\n",
       "1066501    [stopped, visiting, rock, roll, hall, fame, wi...\n",
       "Name: tokens, dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews_df['tokens'] = reviews_df['text'].apply(tokenize, clean)\n",
    "X_test['tokens'] = X_test['text'].apply(tokenize, clean)\n",
    "tacos_df['tokens'] = tacos_df['text'].apply(tokenize, clean)\n",
    "reviews_df['tokens'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' Vectorizing the text column '''\n",
    "vect = TfidfVectorizer()\n",
    "text = X_test['tokens'].astype(str)\n",
    "vect.fit(text)\n",
    "dtm = vect.transform(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "423810     [cosmo, best, restaurants, strip, excited, try...\n",
       "1101674    [ate, lunch, juan, server, tostada, salad, sho...\n",
       "2314731    [team, came, work, dinner, drinks, week, open,...\n",
       "87975      [location, lovely, atmosphere, delightful, ser...\n",
       "1066501    [stopped, visiting, rock, roll, hall, fame, wi...\n",
       "                                 ...                        \n",
       "1431524    [enjoy, going, carolina, area, definitely, ste...\n",
       "722865     [great, little, taco, spot, hidden, phoenix, p...\n",
       "320038     [visited, bustling, friday, night, hostess, ta...\n",
       "2147472    [couple, times, enjoy, andrew, server, night, ...\n",
       "2012844    [love, restaurants, converted, houses, ask, pa...\n",
       "Name: tokens, Length: 112220, dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews_df['tokens']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking out Feature names\n",
    "feature_names = vect.get_feature_names()\n",
    "#print(feature_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'acceptability'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_names[69]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>aaaaaamazing</th>\n",
       "      <th>aaaaand</th>\n",
       "      <th>aaaand</th>\n",
       "      <th>aaah</th>\n",
       "      <th>aaannd</th>\n",
       "      <th>aah</th>\n",
       "      <th>aahhh</th>\n",
       "      <th>aand</th>\n",
       "      <th>aaron</th>\n",
       "      <th>aback</th>\n",
       "      <th>...</th>\n",
       "      <th>étaient</th>\n",
       "      <th>étais</th>\n",
       "      <th>était</th>\n",
       "      <th>étant</th>\n",
       "      <th>étroitesse</th>\n",
       "      <th>été</th>\n",
       "      <th>évidemment</th>\n",
       "      <th>être</th>\n",
       "      <th>ímuy</th>\n",
       "      <th>über</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22445 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   aaaaaamazing  aaaaand  aaaand  aaah  aaannd  aah  aahhh  aand  aaron  \\\n",
       "0           0.0      0.0     0.0   0.0     0.0  0.0    0.0   0.0    0.0   \n",
       "1           0.0      0.0     0.0   0.0     0.0  0.0    0.0   0.0    0.0   \n",
       "2           0.0      0.0     0.0   0.0     0.0  0.0    0.0   0.0    0.0   \n",
       "3           0.0      0.0     0.0   0.0     0.0  0.0    0.0   0.0    0.0   \n",
       "4           0.0      0.0     0.0   0.0     0.0  0.0    0.0   0.0    0.0   \n",
       "\n",
       "   aback  ...  étaient  étais  était  étant  étroitesse  été  évidemment  \\\n",
       "0    0.0  ...      0.0    0.0    0.0    0.0         0.0  0.0         0.0   \n",
       "1    0.0  ...      0.0    0.0    0.0    0.0         0.0  0.0         0.0   \n",
       "2    0.0  ...      0.0    0.0    0.0    0.0         0.0  0.0         0.0   \n",
       "3    0.0  ...      0.0    0.0    0.0    0.0         0.0  0.0         0.0   \n",
       "4    0.0  ...      0.0    0.0    0.0    0.0         0.0  0.0         0.0   \n",
       "\n",
       "   être  ímuy  über  \n",
       "0   0.0   0.0   0.0  \n",
       "1   0.0   0.0   0.0  \n",
       "2   0.0   0.0   0.0  \n",
       "3   0.0   0.0   0.0  \n",
       "4   0.0   0.0   0.0  \n",
       "\n",
       "[5 rows x 22445 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''' Converting spare matrix and putting it into a dataframe and using get_feature_names as the column headers '''\n",
    "dtm = pd.DataFrame(dtm.todense(), columns=vect.get_feature_names())\n",
    "dtm.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NearestNeighbors(algorithm='ball_tree', leaf_size=30, metric='minkowski',\n",
       "                 metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                 radius=1.0)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''' Doing KNN on a Fake review I make and finding the nearest 10 Neighbors '''\n",
    "nn  = NearestNeighbors(n_neighbors=5, algorithm='ball_tree')\n",
    "nn.fit(dtm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "fake_ass_review = ['''\n",
    "Came here for Lunch with my great great great anny who aboslutely LOVES tacos along with her taco nacho monster plate.\n",
    "We actually hail from Los Angeles where the tacos are fresh so the tacos here in Vegas was alright but it could have \n",
    "been better. I personally claim myself as being a true honest to goodness taco Afficienado so when I first laid \n",
    "eyes on the tacos here i was pretty blown away by the presentation however once I actually started to dig in it became \n",
    "very apparent that it would NOT be living up to how good it's presentation was. \n",
    "\n",
    "Oh well, any day where you get to eat tacos is a good day in my book. \n",
    "Espeically when you get to eat tacos with you great great great GREAT anny. \n",
    "\n",
    "OH and the prices are higher than cheech and chong on a Joe rogan Podcast with Elon Musk.\n",
    "\n",
    "''']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "new = vect.transform(fake_ass_review)\n",
    "a = nn.kneighbors(new.todense())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[1.23945952, 1.24225552, 1.26149741, 1.26359526, 1.2689409 ]]),\n",
       " array([[5313, 5492, 1633, 9327, 3766]]))"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The chips were kinda stale, but the tacos were yummy!   I would for sure give this another try if in the area!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "\" \\nahahha nice, so the recommendations thing works and finds the nearest review,\\ntotally not neccessary for this project but could be fun stretch goal if we have time \\nto spare. The usefulness here is that if someone had a text review just like YOURS for \\nanother taco place, it's likely that those two people are very similar and thus could \\nserve as a good potential place for that other person to try out. Kinda like how spotify\\ndoes their song recommendations. Just we need to SQL Business ID and Business name and \\nboom, theres a list of recommendations. \\n\""
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(reviews_df['text'].iloc[5313])\n",
    "\n",
    "''' \n",
    "ahahha nice, so the recommendations thing works and finds the nearest review,\n",
    "totally not neccessary for this project but could be fun stretch goal if we have time \n",
    "to spare. The usefulness here is that if someone had a text review just like YOURS for \n",
    "another taco place, it's likely that those two people are very similar and thus could \n",
    "serve as a good potential place for that other person to try out. Kinda like how spotify\n",
    "does their song recommendations. Just we need to SQL Business ID and Business name and \n",
    "boom, theres a list of recommendations. \n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Topic Modeling + Visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "id2word = corpora.Dictionary(reviews_df['tokens'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' Adding this to do some filtering out '''\n",
    "id2word.filter_extremes(no_below=.15, no_above=.85)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "corpus = [id2word.doc2bow(text) for text in reviews_df['tokens']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "lda = LdaMulticore(corpus=corpus,\n",
    "                   id2word=id2word,\n",
    "                   iterations=5,\n",
    "                   workers=2,\n",
    "                   num_topics = 5,\n",
    "                   passes = 10\n",
    "                  )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----- Topic 0 -----\n",
      "taco like chicken salsa sauce cheese rice beans beef chips\n",
      "\n",
      "\n",
      "----- Topic 1 -----\n",
      "tacos place food good taco great mexican best love asada\n",
      "\n",
      "\n",
      "----- Topic 2 -----\n",
      "like menu food good small dishes restaurant bar little dish\n",
      "\n",
      "\n",
      "----- Topic 3 -----\n",
      "food time order tacos ordered got came service place said\n",
      "\n",
      "\n",
      "----- Topic 4 -----\n",
      "tacos great fish good service shrimp delicious happy nice menu\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "''' Printing out topics cleaned up Version '''\n",
    "\n",
    "words = [re.findall(r'\"([^\"]*)\"',t[1]) for t in lda.print_topics()] # Theres that regex wizardry lol\n",
    "topics = [' '.join(t[0:12]) for t in words]\n",
    "\n",
    "for id, t in enumerate(topics):\n",
    "    print(f\"----- Topic {id} -----\")\n",
    "    print(t)\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/pyLDAvis/_prepare.py:257: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  return pd.concat([default_term_info] + list(topic_dfs))\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.css\">\n",
       "\n",
       "\n",
       "<div id=\"ldavis_el191404808091537846151745842\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "\n",
       "var ldavis_el191404808091537846151745842_data = {\"mdsDat\": {\"x\": [0.11106399298195478, -0.10578767945784183, -0.20163309132494175, 0.1388841295844439, 0.05747264821638482], \"y\": [0.11745823524424659, -0.11456167484024998, 0.045606535829628383, -0.16190844262139759, 0.11340534638777251], \"topics\": [1, 2, 3, 4, 5], \"cluster\": [1, 1, 1, 1, 1], \"Freq\": [22.428112030029297, 21.037782669067383, 19.48448944091797, 19.298662185668945, 17.750957489013672]}, \"tinfo\": {\"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\"], \"Freq\": [141539.0, 57919.0, 32311.0, 72113.0, 72163.0, 31957.0, 31757.0, 16393.0, 16511.0, 19685.0, 15188.0, 26896.0, 13844.0, 20406.0, 26256.0, 16200.0, 89616.0, 39824.0, 16062.0, 13924.0, 99775.0, 33078.0, 22427.0, 17178.0, 18761.0, 9803.0, 15452.0, 12720.0, 10233.0, 9244.0, 9802.4853515625, 4010.253173828125, 3484.80859375, 6507.99951171875, 1422.68603515625, 1318.98486328125, 1089.0826416015625, 1058.901123046875, 935.6778564453125, 928.89599609375, 706.1425170898438, 602.2202758789062, 547.2451782226562, 511.0032043457031, 485.5936584472656, 9223.33203125, 2124.86181640625, 403.64715576171875, 416.044677734375, 568.3043212890625, 375.8385009765625, 383.8971862792969, 374.1238708496094, 353.89190673828125, 364.4719543457031, 353.0576171875, 344.3008117675781, 802.42529296875, 332.07342529296875, 336.3553771972656, 10113.7158203125, 3433.763671875, 4093.007080078125, 2525.77392578125, 1145.1014404296875, 819.2294311523438, 683.9207153320312, 995.482421875, 3604.2099609375, 1924.496337890625, 3308.935546875, 1323.35009765625, 3596.260009765625, 1735.9976806640625, 1815.1268310546875, 11569.8359375, 975.7923583984375, 6923.07177734375, 6131.931640625, 4417.21240234375, 5113.51171875, 3025.267333984375, 1894.692138671875, 1758.87060546875, 4115.6259765625, 18486.166015625, 10272.3037109375, 3901.419189453125, 3747.0341796875, 14236.408203125, 19704.3046875, 9235.587890625, 9966.8408203125, 7504.46923828125, 14983.158203125, 31572.376953125, 15326.16796875, 6751.46337890625, 5827.166015625, 7568.13134765625, 13630.6875, 7187.56298828125, 6794.41259765625, 6797.091796875, 11109.85546875, 12034.8193359375, 15449.41796875, 7464.2119140625, 5717.89892578125, 6165.69189453125, 7424.59375, 6614.55126953125, 15187.5400390625, 13844.166015625, 7399.5947265625, 1844.10400390625, 1374.2655029296875, 1300.411376953125, 841.558349609375, 636.8475341796875, 525.839599609375, 521.2542724609375, 421.4156799316406, 388.78997802734375, 2586.76953125, 376.3058776855469, 326.84857177734375, 298.5310974121094, 285.5467834472656, 285.8179016113281, 274.4112243652344, 231.2154083251953, 222.15956115722656, 217.74993896484375, 304.6324768066406, 211.69522094726562, 223.30169677734375, 186.27183532714844, 180.66961669921875, 162.57102966308594, 161.06988525390625, 153.3909912109375, 1484.0830078125, 978.504638671875, 1955.4888916015625, 797.1083984375, 511.9139099121094, 540.981689453125, 474.83282470703125, 1025.036376953125, 7243.51220703125, 424.7993469238281, 5309.2646484375, 1740.6739501953125, 1158.8045654296875, 6249.75830078125, 2812.86767578125, 10956.341796875, 1362.9559326171875, 4597.4208984375, 1507.269775390625, 5150.93701171875, 19613.751953125, 16216.0419921875, 4918.82666015625, 1561.58203125, 85228.265625, 45709.69921875, 20783.693359375, 6160.298828125, 2723.705078125, 3799.938720703125, 7987.20068359375, 32900.828125, 42458.265625, 38066.23828125, 24673.259765625, 4426.060546875, 9482.0048828125, 6481.94482421875, 9988.9443359375, 12882.7587890625, 12642.4326171875, 14070.166015625, 9941.994140625, 10039.3671875, 6357.16455078125, 10617.6650390625, 6936.74755859375, 7374.00634765625, 9101.521484375, 6801.85986328125, 6986.19873046875, 7372.52685546875, 6907.94091796875, 3886.21533203125, 1734.5531005859375, 1031.7344970703125, 805.0501098632812, 480.89190673828125, 432.304443359375, 630.1016845703125, 409.8190612792969, 395.9411315917969, 683.6564331054688, 380.4361572265625, 1522.02197265625, 346.6477355957031, 337.24664306640625, 330.11865234375, 310.3916320800781, 298.3455505371094, 292.4287414550781, 281.3202819824219, 279.91815185546875, 303.2387390136719, 264.4088134765625, 595.8289794921875, 256.68267822265625, 304.29083251953125, 258.8633728027344, 248.5570831298828, 237.20404052734375, 232.23472595214844, 233.22189331054688, 9061.412109375, 1483.6016845703125, 2973.140869140625, 1098.1702880859375, 4249.724609375, 1009.1279907226562, 3125.964599609375, 1077.9046630859375, 388.2919616699219, 6097.38525390625, 29625.60546875, 2183.46240234375, 2128.542236328125, 2956.37744140625, 7074.43701171875, 9038.7900390625, 12594.4453125, 2519.6591796875, 14469.6201171875, 6297.3232421875, 679.6744384765625, 1848.9189453125, 2046.0799560546875, 1104.3331298828125, 7219.58447265625, 6094.6142578125, 4901.91064453125, 3432.517578125, 8903.8515625, 2216.3271484375, 1861.0704345703125, 32335.146484375, 2697.213623046875, 9454.3173828125, 6294.12451171875, 13621.7880859375, 2999.120361328125, 11756.2646484375, 5041.44775390625, 6737.001953125, 37034.69921875, 15387.3955078125, 25600.42578125, 9534.8310546875, 8676.64453125, 11042.259765625, 7031.65625, 6952.3671875, 9763.9755859375, 7249.27880859375, 5888.32958984375, 6235.82470703125, 7134.68701171875, 9257.1962890625, 8026.16552734375, 6890.93701171875, 6473.26806640625, 4069.304931640625, 4351.6884765625, 1392.7396240234375, 1166.986083984375, 1101.7813720703125, 1703.81396484375, 1791.5054931640625, 790.2218627929688, 629.6565551757812, 457.7134704589844, 417.45111083984375, 396.1280517578125, 514.0960693359375, 302.35345458984375, 296.8878479003906, 536.7119750976562, 255.45094299316406, 238.56654357910156, 3128.311767578125, 227.9541015625, 220.93914794921875, 219.9246826171875, 203.3956756591797, 195.24888610839844, 193.8810272216797, 188.28054809570312, 182.5416717529297, 240.6239013671875, 195.98719787597656, 172.70703125, 4644.71630859375, 7923.80322265625, 16064.19921875, 3907.509521484375, 16168.26953125, 2626.82763671875, 1626.4603271484375, 4303.09814453125, 1718.834228515625, 1569.710205078125, 3289.935791015625, 2889.5302734375, 4586.0732421875, 5565.9716796875, 3705.021484375, 1667.6199951171875, 7475.8974609375, 2580.098388671875, 1632.052490234375, 6118.00341796875, 17280.681640625, 13927.4951171875, 4790.12353515625, 16418.537109375, 4793.640625, 3979.02783203125, 3108.6806640625, 12112.7958984375, 12784.95703125, 7053.2216796875, 3126.451416015625, 7000.197265625, 19633.9765625, 8688.337890625, 8561.572265625, 17379.7265625, 29887.79296875, 13200.6865234375, 22027.232421875, 7386.53173828125, 8019.3291015625, 11159.751953125, 5549.669921875, 9895.0830078125, 12360.8896484375, 9675.2021484375, 6619.6142578125, 5711.498046875, 5133.32470703125, 3734.646240234375, 2759.608154296875, 1731.817626953125, 1352.246826171875, 1100.6119384765625, 3682.67236328125, 983.146240234375, 972.555908203125, 937.3272705078125, 906.7317504882812, 1499.875732421875, 846.86572265625, 753.636474609375, 703.956787109375, 660.7262573242188, 633.0759887695312, 619.6719360351562, 603.2261352539062, 558.3735961914062, 544.7680053710938, 533.1810913085938, 523.5180053710938, 505.5835876464844, 495.8922119140625, 492.1556701660156, 480.3800048828125, 485.4051208496094, 456.1675109863281, 452.17791748046875, 444.19732666015625, 1318.847900390625, 1503.2559814453125, 1925.5870361328125, 2150.084228515625, 686.1215209960938, 2422.5234375, 1420.75732421875, 1445.437744140625, 2168.013671875, 1138.34912109375, 2763.4384765625, 1556.5831298828125, 1135.301025390625, 3609.462158203125, 838.1736450195312, 3657.014404296875, 1826.9569091796875, 1709.6480712890625, 4574.4794921875, 3758.203125, 1576.720947265625, 2081.827392578125, 2729.640869140625, 2359.47314453125, 4114.66162109375, 2560.698486328125, 1853.0081787109375, 3596.8134765625, 11599.1337890625, 7678.38232421875, 2697.846923828125, 4861.96826171875, 2657.146240234375, 3532.547119140625, 2302.727783203125, 3494.59375, 4337.09912109375, 3810.32177734375, 3609.717529296875, 4411.39501953125, 6812.6875, 4223.00634765625, 4025.7177734375, 6164.240234375, 3252.18505859375, 3125.104248046875, 3102.2587890625, 3470.28076171875, 3618.81005859375, 2781.4619140625, 2812.38037109375, 2803.67822265625, 2785.396240234375], \"Term\": [\"tacos\", \"great\", \"fish\", \"taco\", \"place\", \"mexican\", \"salsa\", \"beans\", \"rice\", \"sauce\", \"asada\", \"delicious\", \"carne\", \"cheese\", \"best\", \"shrimp\", \"good\", \"service\", \"beef\", \"happy\", \"food\", \"chicken\", \"love\", \"meat\", \"amazing\", \"minutes\", \"flavor\", \"said\", \"took\", \"atmosphere\", \"minutes\", \"manager\", \"waited\", \"told\", \"rude\", \"min\", \"mins\", \"phone\", \"management\", \"attitude\", \"returned\", \"employee\", \"apologized\", \"receipt\", \"upset\", \"asked\", \"hostess\", \"annoyed\", \"spoke\", \"informed\", \"messed\", \"training\", \"gentleman\", \"response\", \"flag\", \"complained\", \"ignored\", \"woman\", \"proceeded\", \"greet\", \"took\", \"walked\", \"waiting\", \"customers\", \"charged\", \"showed\", \"correct\", \"forever\", \"later\", \"girl\", \"orders\", \"asking\", \"arrived\", \"lady\", \"received\", \"said\", \"mistake\", \"wanted\", \"waitress\", \"brought\", \"left\", \"guy\", \"horrible\", \"paid\", \"finally\", \"order\", \"table\", \"seated\", \"water\", \"came\", \"time\", \"people\", \"went\", \"server\", \"got\", \"food\", \"ordered\", \"bad\", \"long\", \"wait\", \"service\", \"know\", \"going\", \"wasn\", \"like\", \"place\", \"tacos\", \"restaurant\", \"experience\", \"night\", \"good\", \"taco\", \"asada\", \"carne\", \"pastor\", \"lengua\", \"gordo\", \"adobada\", \"tortas\", \"cabeza\", \"agua\", \"cochinita\", \"tijuana\", \"frescas\", \"horchata\", \"sopes\", \"muy\", \"tripa\", \"tripas\", \"birria\", \"jamaica\", \"comida\", \"gorditas\", \"vampiro\", \"sabor\", \"aguas\", \"pepe\", \"buche\", \"adobado\", \"condesa\", \"santisima\", \"suadero\", \"torta\", \"diego\", \"bomb\", \"legit\", \"elote\", \"menudo\", \"pibil\", \"tuesdays\", \"authentic\", \"robertos\", \"burritos\", \"quesadillas\", \"san\", \"fast\", \"shop\", \"street\", \"hole\", \"carnitas\", \"los\", \"quick\", \"best\", \"love\", \"clean\", \"pollo\", \"tacos\", \"place\", \"mexican\", \"prices\", \"phoenix\", \"cheap\", \"favorite\", \"taco\", \"food\", \"good\", \"great\", \"town\", \"friendly\", \"worth\", \"amazing\", \"delicious\", \"try\", \"salsa\", \"definitely\", \"fresh\", \"super\", \"service\", \"tried\", \"come\", \"time\", \"burrito\", \"pretty\", \"like\", \"little\", \"mahi\", \"ahi\", \"blackened\", \"knowledgeable\", \"pear\", \"les\", \"mojito\", \"est\", \"tako\", \"cauliflower\", \"brussel\", \"sangria\", \"brussels\", \"guild\", \"quinoa\", \"marg\", \"tequilas\", \"des\", \"swordfish\", \"ipa\", \"playa\", \"mojitos\", \"kale\", \"mule\", \"plantain\", \"grapefruit\", \"hangout\", \"noda\", \"pas\", \"prickly\", \"atmosphere\", \"calamari\", \"ceviche\", \"octopus\", \"attentive\", \"cod\", \"beers\", \"battered\", \"bakersfield\", \"patio\", \"fish\", \"mango\", \"cocktails\", \"tequila\", \"margarita\", \"beer\", \"happy\", \"vibe\", \"shrimp\", \"margaritas\", \"draft\", \"outdoor\", \"shared\", \"tap\", \"loved\", \"enjoyed\", \"fun\", \"appetizer\", \"hour\", \"appetizers\", \"slaw\", \"great\", \"wings\", \"drinks\", \"excellent\", \"delicious\", \"wonderful\", \"nice\", \"perfect\", \"dinner\", \"tacos\", \"service\", \"good\", \"definitely\", \"amazing\", \"menu\", \"night\", \"friendly\", \"ordered\", \"bar\", \"tasty\", \"pork\", \"try\", \"food\", \"place\", \"chicken\", \"came\", \"enchilada\", \"shredded\", \"tamale\", \"relleno\", \"tex\", \"refried\", \"ground\", \"grocery\", \"canned\", \"smothered\", \"diced\", \"runny\", \"pinto\", \"qdoba\", \"carolina\", \"mushy\", \"palmas\", \"lard\", \"chile\", \"iceberg\", \"styrofoam\", \"processed\", \"frybread\", \"mush\", \"masa\", \"reyna\", \"rosa\", \"thicker\", \"moe\", \"macayo\", \"lettuce\", \"tortilla\", \"beans\", \"sour\", \"rice\", \"flour\", \"shells\", \"onions\", \"tomatoes\", \"mex\", \"shell\", \"pico\", \"cilantro\", \"bland\", \"chili\", \"mild\", \"green\", \"greasy\", \"seasoning\", \"red\", \"sauce\", \"beef\", \"dry\", \"cheese\", \"soft\", \"chipotle\", \"combo\", \"flavor\", \"meat\", \"tortillas\", \"bean\", \"tasted\", \"chicken\", \"taste\", \"hot\", \"salsa\", \"taco\", \"chips\", \"like\", \"corn\", \"burrito\", \"mexican\", \"plate\", \"ordered\", \"good\", \"food\", \"little\", \"better\", \"spicy\", \"buffet\", \"sushi\", \"asian\", \"chinese\", \"pool\", \"pizza\", \"noodles\", \"casino\", \"prime\", \"kimchi\", \"fusion\", \"legs\", \"italian\", \"buffets\", \"steamed\", \"dim\", \"buns\", \"ramen\", \"pho\", \"bao\", \"cookies\", \"sum\", \"bacchanal\", \"sashimi\", \"cookie\", \"japanese\", \"pancakes\", \"gelato\", \"soups\", \"waffles\", \"rolls\", \"coffee\", \"roll\", \"hotel\", \"toast\", \"chocolate\", \"section\", \"desserts\", \"station\", \"bun\", \"crab\", \"eggs\", \"sandwiches\", \"ice\", \"sausage\", \"room\", \"korean\", \"egg\", \"dishes\", \"dessert\", \"tea\", \"vegan\", \"bread\", \"seafood\", \"dish\", \"lobster\", \"space\", \"items\", \"like\", \"menu\", \"dining\", \"small\", \"breakfast\", \"vegas\", \"sandwich\", \"lot\", \"bar\", \"think\", \"bit\", \"restaurant\", \"food\", \"little\", \"pretty\", \"good\", \"fries\", \"price\", \"area\", \"try\", \"place\", \"things\", \"way\", \"eat\", \"fried\"], \"Total\": [141539.0, 57919.0, 32311.0, 72113.0, 72163.0, 31957.0, 31757.0, 16393.0, 16511.0, 19685.0, 15188.0, 26896.0, 13844.0, 20406.0, 26256.0, 16200.0, 89616.0, 39824.0, 16062.0, 13924.0, 99775.0, 33078.0, 22427.0, 17178.0, 18761.0, 9803.0, 15452.0, 12720.0, 10233.0, 9244.0, 9803.326171875, 4011.06689453125, 3485.62255859375, 6510.01171875, 1423.493896484375, 1319.8128662109375, 1089.89599609375, 1059.7125244140625, 936.4930419921875, 929.7117919921875, 706.961669921875, 603.0319213867188, 548.0538330078125, 511.814208984375, 486.4094543457031, 9239.3134765625, 2128.87353515625, 404.4570007324219, 416.8969421386719, 569.4882202148438, 376.6507568359375, 384.7275085449219, 374.9469909667969, 354.7054748535156, 365.3112487792969, 353.873046875, 345.1124267578125, 804.38525390625, 332.8851623535156, 337.1860656738281, 10233.611328125, 3447.422119140625, 4122.1005859375, 2553.341552734375, 1150.2030029296875, 821.6032104492188, 686.5922241210938, 1005.0328369140625, 3691.6591796875, 1960.1641845703125, 3416.489013671875, 1347.4051513671875, 3753.96337890625, 1785.2215576171875, 1871.686279296875, 12720.740234375, 996.2009887695312, 8191.62841796875, 7204.85107421875, 5123.2578125, 6081.09228515625, 3477.760986328125, 2062.340087890625, 1899.8746337890625, 5013.4755859375, 28592.92578125, 14616.8974609375, 4796.369140625, 4622.21435546875, 24265.46484375, 38146.88671875, 15023.94921875, 17159.748046875, 11920.767578125, 29687.732421875, 99775.7265625, 36074.64453125, 11241.755859375, 9169.7587890625, 14558.71875, 39824.8046875, 13586.86328125, 12706.3818359375, 12971.1015625, 53643.4453125, 72163.3515625, 141539.828125, 26240.099609375, 11557.8125, 15551.75, 89616.390625, 72113.8984375, 15188.3544921875, 13844.998046875, 7400.41162109375, 1844.914794921875, 1375.0748291015625, 1301.22021484375, 842.490234375, 637.6555786132812, 526.6586303710938, 522.0790405273438, 422.2283935546875, 389.60626220703125, 2592.36962890625, 377.1222839355469, 327.6666564941406, 299.3389892578125, 286.35467529296875, 286.6394958496094, 275.28302001953125, 232.03944396972656, 222.97695922851562, 218.5646514892578, 305.8029479980469, 212.511474609375, 224.22032165527344, 187.0785675048828, 181.48046875, 163.39161682128906, 161.88714599609375, 154.20144653320312, 1502.4801025390625, 988.6309814453125, 1991.0548095703125, 805.6551513671875, 516.1163940429688, 547.2918090820312, 480.2559509277344, 1053.2572021484375, 7811.61572265625, 434.3660888671875, 5930.658203125, 1878.13720703125, 1230.6981201171875, 7247.7421875, 3129.664306640625, 13174.7919921875, 1478.954833984375, 5422.05810546875, 1655.1629638671875, 6218.21337890625, 26256.30859375, 22427.201171875, 6058.25830078125, 1737.0406494140625, 141539.828125, 72163.3515625, 31957.634765625, 8369.5595703125, 3277.35693359375, 4953.45947265625, 12247.1044921875, 72113.8984375, 99775.7265625, 89616.390625, 57919.01953125, 6266.58544921875, 16949.69921875, 10413.9892578125, 18761.91796875, 26896.9140625, 27071.740234375, 31757.91015625, 20872.36328125, 21227.853515625, 10880.5205078125, 39824.8046875, 14551.9365234375, 19160.921875, 38146.88671875, 14830.3984375, 21271.96484375, 53643.4453125, 24214.357421875, 3887.03076171875, 1735.3819580078125, 1032.55078125, 805.8704223632812, 481.70660400390625, 433.1155090332031, 631.3182983398438, 410.62322998046875, 396.7604064941406, 685.0844116210938, 381.2492980957031, 1525.557373046875, 347.46160888671875, 338.06549072265625, 330.93621826171875, 311.2215270996094, 299.1658935546875, 293.23297119140625, 282.134765625, 280.7309875488281, 304.1280212402344, 265.2225341796875, 597.6737060546875, 257.4945983886719, 305.2544860839844, 259.6847229003906, 249.37841796875, 238.01910400390625, 233.03921508789062, 234.034423828125, 9244.595703125, 1489.537353515625, 3006.450439453125, 1106.016845703125, 4343.43212890625, 1019.65234375, 3197.09521484375, 1093.3668212890625, 390.0012512207031, 6368.96826171875, 32311.734375, 2258.383056640625, 2201.784423828125, 3079.405517578125, 7541.55859375, 9752.8369140625, 13924.0966796875, 2665.156494140625, 16200.2666015625, 6913.5673828125, 692.7078247070312, 1967.18701171875, 2219.473388671875, 1160.3486328125, 8615.451171875, 7225.85400390625, 5822.341796875, 4006.546875, 11717.5439453125, 2495.560791015625, 2056.453369140625, 57919.01953125, 3183.549072265625, 14262.103515625, 9389.162109375, 26896.9140625, 3724.71923828125, 23575.103515625, 7737.404296875, 11797.197265625, 141539.828125, 39824.8046875, 89616.390625, 20872.36328125, 18761.91796875, 27657.060546875, 15551.75, 16949.69921875, 36074.64453125, 20500.2265625, 13292.26171875, 16360.9580078125, 27071.740234375, 99775.7265625, 72163.3515625, 33078.6953125, 24265.46484375, 4070.122802734375, 4353.8349609375, 1393.67724609375, 1167.80029296875, 1102.692138671875, 1705.266357421875, 1793.3048095703125, 791.0401000976562, 630.471923828125, 458.52874755859375, 418.2632141113281, 396.94317626953125, 515.1848754882812, 303.17529296875, 297.70599365234375, 538.42236328125, 256.2694091796875, 239.3779296875, 3138.98193359375, 228.76934814453125, 221.755126953125, 220.74571228027344, 204.20770263671875, 196.05990600585938, 194.693115234375, 189.10855102539062, 183.3617401123047, 241.71197509765625, 196.87525939941406, 173.51914978027344, 4666.76953125, 8026.6259765625, 16393.689453125, 3931.886474609375, 16511.26171875, 2659.579833984375, 1647.5113525390625, 4416.1875, 1748.93701171875, 1600.1920166015625, 3379.041015625, 2969.866943359375, 4767.21044921875, 5823.48291015625, 3848.142822265625, 1706.4764404296875, 7924.90966796875, 2706.075439453125, 1693.4954833984375, 6620.82763671875, 19685.638671875, 16062.3837890625, 5305.9365234375, 20406.087890625, 5373.6591796875, 4406.16845703125, 3383.508056640625, 15452.8857421875, 17178.27734375, 9040.9169921875, 3516.869384765625, 9292.0830078125, 33078.6953125, 12594.91015625, 12433.11328125, 31757.91015625, 72113.8984375, 25171.08203125, 53643.4453125, 11293.0517578125, 14830.3984375, 31957.634765625, 8219.576171875, 36074.64453125, 89616.390625, 99775.7265625, 24214.357421875, 17056.109375, 11390.85546875, 3735.451416015625, 2760.417236328125, 1732.6282958984375, 1353.0567626953125, 1101.4251708984375, 3685.612060546875, 983.9561157226562, 973.36865234375, 938.1414184570312, 907.5481567382812, 1501.27001953125, 847.67041015625, 754.4473876953125, 704.7606201171875, 661.5427856445312, 633.8873901367188, 620.480712890625, 604.0316162109375, 559.1803588867188, 545.57275390625, 533.9900512695312, 524.3330078125, 506.3856201171875, 496.707275390625, 492.97637939453125, 481.1858215332031, 486.25738525390625, 456.97210693359375, 452.9920959472656, 445.03839111328125, 1323.3717041015625, 1510.5469970703125, 1945.599609375, 2176.64306640625, 687.76416015625, 2484.893798828125, 1446.46484375, 1478.5615234375, 2244.7001953125, 1162.3446044921875, 2971.218994140625, 1628.671630859375, 1175.0050048828125, 4032.394775390625, 864.8924560546875, 4449.8427734375, 2060.3642578125, 1953.276123046875, 6086.7177734375, 5293.705078125, 1855.70703125, 2642.612548828125, 3907.24658203125, 3275.267578125, 7087.5537109375, 3766.224365234375, 2410.498291015625, 6905.4599609375, 53643.4453125, 27657.060546875, 4769.576171875, 15039.8828125, 4785.9873046875, 9014.599609375, 3832.184326171875, 10450.1484375, 20500.2265625, 14830.619140625, 13718.509765625, 26240.099609375, 99775.7265625, 24214.357421875, 21271.96484375, 89616.390625, 11064.404296875, 10637.890625, 10455.22265625, 27071.740234375, 72163.3515625, 8080.64990234375, 14059.916015625, 17673.466796875, 9814.6650390625], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.4947999715805054, 1.4946999549865723, 1.4946000576019287, 1.4945000410079956, 1.4943000078201294, 1.4941999912261963, 1.4940999746322632, 1.4940999746322632, 1.49399995803833, 1.49399995803833, 1.4937000274658203, 1.493499994277954, 1.493399977684021, 1.493299961090088, 1.4931999444961548, 1.4931000471115112, 1.4930000305175781, 1.492900013923645, 1.492799997329712, 1.492799997329712, 1.4926999807357788, 1.4926999807357788, 1.4926999807357788, 1.4925999641418457, 1.4925999641418457, 1.4924999475479126, 1.4924999475479126, 1.492400050163269, 1.492400050163269, 1.492400050163269, 1.4831000566482544, 1.4909000396728516, 1.4878000020980835, 1.4839999675750732, 1.490399956703186, 1.4919999837875366, 1.4910000562667847, 1.4852999448776245, 1.470900058746338, 1.4765000343322754, 1.4629000425338745, 1.4767999649047852, 1.4519000053405762, 1.4668999910354614, 1.4642000198364258, 1.399999976158142, 1.4742000102996826, 1.3265999555587769, 1.3336000442504883, 1.34660005569458, 1.3215999603271484, 1.3554999828338623, 1.410099983215332, 1.4177000522613525, 1.2975000143051147, 1.0586999654769897, 1.1420999765396118, 1.2883000373840332, 1.2848999500274658, 0.9616000056266785, 0.8342000246047974, 1.0082999467849731, 0.9516000151634216, 1.032099962234497, 0.8109999895095825, 0.3441999852657318, 0.6388000249862671, 0.9850000143051147, 1.0414999723434448, 0.8406000137329102, 0.4226999878883362, 0.8580999970436096, 0.8689000010490417, 0.8485999703407288, -0.07970000058412552, -0.2962999939918518, -0.7202000021934509, 0.23770000040531158, 0.791100025177002, 0.5697000026702881, -0.9958999752998352, -0.89410001039505, 1.5587999820709229, 1.5587999820709229, 1.5586999654769897, 1.55840003490448, 1.5583000183105469, 1.5582000017166138, 1.5577000379562378, 1.5576000213623047, 1.5572999715805054, 1.5572999715805054, 1.5569000244140625, 1.5568000078201294, 1.5566999912261963, 1.5566999912261963, 1.556399941444397, 1.5561000108718872, 1.555999994277954, 1.555999994277954, 1.5556999444961548, 1.555299997329712, 1.5551999807357788, 1.5550999641418457, 1.5549999475479126, 1.5549999475479126, 1.5547000169754028, 1.5544999837875366, 1.5543999671936035, 1.5537999868392944, 1.5537999868392944, 1.5535999536514282, 1.5464999675750732, 1.5485999584197998, 1.5407999753952026, 1.548200011253357, 1.5506999492645264, 1.5472999811172485, 1.5475000143051147, 1.5317000150680542, 1.483299970626831, 1.5365999937057495, 1.448199987411499, 1.482800006866455, 1.4987000226974487, 1.4106999635696411, 1.4521000385284424, 1.374500036239624, 1.4772000312805176, 1.3939000368118286, 1.4652999639511108, 1.3704999685287476, 1.267199993133545, 1.2345999479293823, 1.3504999876022339, 1.4523999691009521, 1.0515999794006348, 1.1022000312805176, 1.128600001335144, 1.2524000406265259, 1.3738000392913818, 1.2936999797821045, 1.1313999891281128, 0.7741000056266785, 0.7044000029563904, 0.7026000022888184, 0.7055000066757202, 1.2110999822616577, 0.9779999852180481, 1.0846999883651733, 0.9284999966621399, 0.822700023651123, 0.7973999977111816, 0.7447999715805054, 0.8172000050544739, 0.8100000023841858, 1.0214999914169312, 0.23690000176429749, 0.8180000185966492, 0.6039000153541565, 0.1257999986410141, 0.7793999910354614, 0.4453999996185303, -0.42570000886917114, 0.3046000003814697, 1.6353000402450562, 1.63510000705719, 1.6347999572753906, 1.6345000267028809, 1.6339000463485718, 1.6337000131607056, 1.6335999965667725, 1.6335999965667725, 1.6334999799728394, 1.6334999799728394, 1.6333999633789062, 1.6332000494003296, 1.6332000494003296, 1.6331000328063965, 1.6331000328063965, 1.6328999996185303, 1.6327999830245972, 1.6327999830245972, 1.632699966430664, 1.632699966430664, 1.632599949836731, 1.6325000524520874, 1.6325000524520874, 1.6324000358581543, 1.6324000358581543, 1.6324000358581543, 1.6323000192642212, 1.632099986076355, 1.632099986076355, 1.632099986076355, 1.6154999732971191, 1.631600022315979, 1.624400019645691, 1.6283999681472778, 1.613700032234192, 1.6252000331878662, 1.6131000518798828, 1.6212999820709229, 1.6311999559402466, 1.5920000076293945, 1.548799991607666, 1.6017999649047852, 1.601699948310852, 1.5947999954223633, 1.5715999603271484, 1.559499979019165, 1.5351999998092651, 1.5793999433517456, 1.5226000547409058, 1.542199969291687, 1.6166000366210938, 1.5735000371932983, 1.5542000532150269, 1.5860999822616577, 1.458799958229065, 1.4652999639511108, 1.4635000228881836, 1.4809000492095947, 1.3609000444412231, 1.5168999433517456, 1.5356999635696411, 1.0527000427246094, 1.4697999954223633, 1.2244000434875488, 1.2355999946594238, 0.9552000164985657, 1.4189000129699707, 0.9397000074386597, 1.207200050354004, 1.0752999782562256, 0.2948000133037567, 0.6845999956130981, 0.38260000944137573, 0.8521000146865845, 0.8644000291824341, 0.7174000144004822, 0.8417999744415283, 0.7444000244140625, 0.3287000060081482, 0.5960000157356262, 0.8213000297546387, 0.6710000038146973, 0.3019999861717224, -0.7419999837875366, -0.560699999332428, 0.06689999997615814, 0.3142000138759613, 1.6448999643325806, 1.6446000337600708, 1.6445000171661377, 1.6444000005722046, 1.6442999839782715, 1.6442999839782715, 1.6440999507904053, 1.6440999507904053, 1.6438000202178955, 1.643399953842163, 1.6432000398635864, 1.6431000232696533, 1.6430000066757202, 1.6424000263214111, 1.6424000263214111, 1.6419999599456787, 1.6418999433517456, 1.641700029373169, 1.641700029373169, 1.6416000127792358, 1.6413999795913696, 1.6413999795913696, 1.6411999464035034, 1.6410000324249268, 1.6410000324249268, 1.6406999826431274, 1.6406999826431274, 1.6405999660491943, 1.6405999660491943, 1.6404000520706177, 1.6404000520706177, 1.632200002670288, 1.6247999668121338, 1.6389000415802002, 1.6240999698638916, 1.632699966430664, 1.6323000192642212, 1.6191999912261963, 1.6277999877929688, 1.6259000301361084, 1.618399977684021, 1.6176999807357788, 1.6064000129699707, 1.5999000072479248, 1.607200026512146, 1.6220999956130981, 1.5867999792099, 1.597499966621399, 1.608199954032898, 1.566100001335144, 1.514799952507019, 1.502500057220459, 1.5428999662399292, 1.4277000427246094, 1.530900001525879, 1.5432000160217285, 1.5604000091552734, 1.4016000032424927, 1.3497999906539917, 1.3969000577926636, 1.527500033378601, 1.361899971961975, 1.1234999895095825, 1.273800015449524, 1.2720999717712402, 1.0422999858856201, 0.7642999887466431, 0.9997000098228455, 0.7551000118255615, 1.2206000089645386, 1.0303000211715698, 0.5929999947547913, 1.2524000406265259, 0.3515999913215637, -0.3359000086784363, -0.6881999969482422, 0.3481999933719635, 0.5511000156402588, 0.8481000065803528, 1.7285000085830688, 1.7283999919891357, 1.7282999753952026, 1.7280999422073364, 1.7280000448226929, 1.7279000282287598, 1.7279000282287598, 1.7279000282287598, 1.7279000282287598, 1.7278000116348267, 1.7278000116348267, 1.7278000116348267, 1.7276999950408936, 1.7275999784469604, 1.7274999618530273, 1.7273999452590942, 1.7273999452590942, 1.7273999452590942, 1.7273000478744507, 1.7273000478744507, 1.7272000312805176, 1.7272000312805176, 1.7271000146865845, 1.7271000146865845, 1.7271000146865845, 1.7271000146865845, 1.7269999980926514, 1.7269999980926514, 1.7268999814987183, 1.7267999649047852, 1.7252999544143677, 1.7238999605178833, 1.718400001525879, 1.7165000438690186, 1.7263000011444092, 1.7032999992370605, 1.710800051689148, 1.7060999870300293, 1.694000005722046, 1.707900047302246, 1.6562000513076782, 1.683500051498413, 1.6943999528884888, 1.617900013923645, 1.6973999738693237, 1.5325000286102295, 1.6085000038146973, 1.5954999923706055, 1.4430999755859375, 1.386199951171875, 1.5657999515533447, 1.4902000427246094, 1.3701000213623047, 1.4007999897003174, 1.1849000453948975, 1.342900037765503, 1.4657000303268433, 1.0765000581741333, 0.1973000019788742, 0.447299987077713, 1.1589000225067139, 0.5995000004768372, 1.1403000354766846, 0.7918999791145325, 1.2194000482559204, 0.6333000063896179, 0.17550000548362732, 0.36980000138282776, 0.3935999870300293, -0.0544000007212162, -0.9553999900817871, -0.01769999973475933, 0.06400000303983688, -0.9480000138282776, 0.5042999982833862, 0.5037999749183655, 0.5138000249862671, -0.3255000114440918, -1.2640999555587769, 0.6621999740600586, 0.11940000206232071, -0.11240000277757645, 0.4691999852657318], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -4.994200229644775, -5.888000011444092, -6.02839994430542, -5.403800010681152, -6.924300193786621, -7.0, -7.191500186920166, -7.219600200653076, -7.343299865722656, -7.350599765777588, -7.624800205230713, -7.783999919891357, -7.879700183868408, -7.948200225830078, -7.999199867248535, -5.055099964141846, -6.523099899291992, -8.184100151062012, -8.153800010681152, -7.8420000076293945, -8.255399703979492, -8.234199523925781, -8.260000228881836, -8.315600395202637, -8.286199569702148, -8.317999839782715, -8.343099594116211, -7.497000217437744, -8.379300117492676, -8.366399765014648, -4.9629998207092285, -6.0432000160217285, -5.867599964141846, -6.350299835205078, -7.14139986038208, -7.476200103759766, -7.656799793243408, -7.281400203704834, -5.994699954986572, -6.622200012207031, -6.0802001953125, -6.996699810028076, -5.997000217437744, -6.725299835205078, -6.680699825286865, -4.828499794006348, -7.301400184631348, -5.3420000076293945, -5.4633002281188965, -5.791299819946289, -5.644999980926514, -6.169899940490723, -6.637800216674805, -6.712200164794922, -5.862100124359131, -4.359799861907959, -4.947400093078613, -5.915500164031982, -5.955900192260742, -4.620999813079834, -4.296000003814697, -5.053800106048584, -4.97760009765625, -5.26140022277832, -4.569900035858154, -3.8245999813079834, -4.547299861907959, -5.367099761962891, -5.5142998695373535, -5.252900123596191, -4.6645002365112305, -5.304500102996826, -5.360799789428711, -5.360400199890137, -4.86899995803833, -4.789000034332275, -4.539299964904785, -5.26669979095459, -5.533299922943115, -5.457900047302246, -5.27209997177124, -5.387599945068359, -4.492400169372559, -4.585000038146973, -5.211400032043457, -6.600900173187256, -6.894899845123291, -6.950200080871582, -7.38539981842041, -7.664100170135498, -7.855599880218506, -7.8643999099731445, -8.07699966430664, -8.157600402832031, -6.262400150299072, -8.190199851989746, -8.331100463867188, -8.421699523925781, -8.46619987487793, -8.465299606323242, -8.505999565124512, -8.677300453186035, -8.71720027923584, -8.737299919128418, -8.40149974822998, -8.76550006866455, -8.7121000289917, -8.893400192260742, -8.92389965057373, -9.029500007629395, -9.038800239562988, -9.087599754333496, -6.8180999755859375, -7.234600067138672, -6.542200088500977, -7.439599990844727, -7.882500171661377, -7.827199935913086, -7.957600116729736, -7.1880998611450195, -5.232800006866455, -8.069000244140625, -5.543399810791016, -6.658599853515625, -7.065499782562256, -5.380300045013428, -6.178699970245361, -4.818900108337402, -6.903200149536133, -5.687399864196777, -6.802599906921387, -5.573699951171875, -4.236599922180176, -4.4268999099731445, -5.619800090789795, -6.767199993133545, -2.7674999237060547, -3.390500068664551, -4.178699970245361, -5.394700050354004, -6.210899829864502, -5.877900123596191, -5.135000228881836, -3.719399929046631, -3.4642999172210693, -3.573499917984009, -4.0071001052856445, -5.725299835205078, -4.963500022888184, -5.343800067901611, -4.911399841308594, -4.6570000648498535, -4.67579984664917, -4.56879997253418, -4.916100025177002, -4.906300067901611, -5.36329984664917, -4.850299835205078, -5.276000022888184, -5.214900016784668, -5.00439977645874, -5.2957000732421875, -5.268899917602539, -5.215099811553955, -5.280200004577637, -5.77869987487793, -6.585400104522705, -7.104899883270264, -7.353000164031982, -7.868299961090088, -7.974800109863281, -7.5980000495910645, -8.028200149536133, -8.062600135803223, -7.516499996185303, -8.10260009765625, -6.716100215911865, -8.195599555969238, -8.223099708557129, -8.244500160217285, -8.306099891662598, -8.34570026397705, -8.365699768066406, -8.404399871826172, -8.40939998626709, -8.329400062561035, -8.466400146484375, -7.6539998054504395, -8.496100425720215, -8.325900077819824, -8.487600326538086, -8.528200149536133, -8.574999809265137, -8.596199989318848, -8.591899871826172, -4.93209981918335, -6.741700172424316, -6.046500205993652, -7.042500019073486, -5.689300060272217, -7.127099990844727, -5.996399879455566, -7.061100006103516, -8.082200050354004, -5.3282999992370605, -3.747499942779541, -6.355199813842773, -6.38070011138916, -6.052199840545654, -5.179699897766113, -4.934599876403809, -4.60290002822876, -6.211999893188477, -4.464099884033203, -5.296000003814697, -7.522299766540527, -6.521599769592285, -6.420199871063232, -7.036900043487549, -5.15939998626709, -5.328800201416016, -5.546500205993652, -5.902900218963623, -4.949699878692627, -6.3403000831604, -6.514999866485596, -3.6600000858306885, -6.143899917602539, -4.889699935913086, -5.296500205993652, -4.524499893188477, -6.037799835205078, -4.671800136566162, -5.518499851226807, -5.228499889373779, -3.5243000984191895, -4.402599811553955, -3.8935000896453857, -4.881199836730957, -4.975500106811523, -4.734399795532227, -5.185699939727783, -5.1971001625061035, -4.857500076293945, -5.155300140380859, -5.3632001876831055, -5.305799961090088, -5.171199798583984, -4.910799980163574, -5.053400039672852, -5.205900192260742, -5.268499851226807, -5.723100185394287, -5.656000137329102, -6.795300006866455, -6.972099781036377, -7.029600143432617, -6.593699932098389, -6.543499946594238, -7.361999988555908, -7.589200019836426, -7.908100128173828, -8.000200271606445, -8.052599906921387, -7.791900157928467, -8.322699546813965, -8.340999603271484, -7.748899936676025, -8.491299629211426, -8.559700012207031, -5.986100196838379, -8.605199813842773, -8.63640022277832, -8.640999794006348, -8.719200134277344, -8.760100364685059, -8.76710033416748, -8.79640007019043, -8.827400207519531, -8.55109977722168, -8.75629997253418, -8.882699966430664, -5.590799808502197, -5.056700229644775, -4.349999904632568, -5.763700008392334, -4.343500137329102, -6.160799980163574, -6.640200138092041, -5.667200088500977, -6.58489990234375, -6.6757001876831055, -5.935699939727783, -6.065499782562256, -5.603499889373779, -5.409900188446045, -5.81689977645874, -6.615200042724609, -5.1149001121521, -6.178699970245361, -6.63670015335083, -5.315299987792969, -4.2769999504089355, -4.492700099945068, -5.559999942779541, -4.328199863433838, -5.559299945831299, -5.745500087738037, -5.992400169372559, -4.632299900054932, -4.5782999992370605, -5.173099994659424, -5.986700057983398, -5.180600166320801, -4.1493000984191895, -4.964600086212158, -4.979300022125244, -4.271299839019775, -3.729099988937378, -4.546299934387207, -4.034299850463867, -5.1269001960754395, -5.0447001457214355, -4.714300155639648, -5.412799835205078, -4.834499835968018, -4.611999988555908, -4.85699987411499, -5.236499786376953, -5.384099960327148, -5.490799903869629, -5.725299835205078, -6.027900218963623, -6.493800163269043, -6.741199970245361, -6.9471001625061035, -5.739299774169922, -7.059999942779541, -7.070799827575684, -7.107699871063232, -7.140900135040283, -6.637599945068359, -7.209199905395508, -7.325799942016602, -7.394000053405762, -7.457399845123291, -7.500100135803223, -7.521500110626221, -7.548399925231934, -7.625699996948242, -7.650400161743164, -7.671899795532227, -7.690199851989746, -7.724999904632568, -7.7444000244140625, -7.7519001960754395, -7.776199817657471, -7.765699863433838, -7.827899932861328, -7.836699962615967, -7.854499816894531, -6.766200065612793, -6.635300159454346, -6.387700080871582, -6.277500152587891, -7.4197001457214355, -6.158199787139893, -6.691800117492676, -6.674600124359131, -6.269199848175049, -6.913400173187256, -6.026500225067139, -6.600500106811523, -6.916100025177002, -5.759399890899658, -7.2195000648498535, -5.746300220489502, -6.440299987792969, -6.506700038909912, -5.522500038146973, -5.718999862670898, -6.587600231170654, -6.309700012207031, -6.03879976272583, -6.184500217437744, -5.628399848937988, -6.102700233459473, -6.426199913024902, -5.762899875640869, -4.5920000076293945, -5.0046000480651855, -6.05049991607666, -5.46150016784668, -6.065700054168701, -5.781000137329102, -6.208899974822998, -5.791800022125244, -5.575799942016602, -5.7052998542785645, -5.759300231933594, -5.558800220489502, -5.124199867248535, -5.602399826049805, -5.650300025939941, -5.2241997718811035, -5.86359977722168, -5.903500080108643, -5.910799980163574, -5.798699855804443, -5.756800174713135, -6.019999980926514, -6.008900165557861, -6.01200008392334, -6.018599987030029]}, \"token.table\": {\"Topic\": [2, 2, 2, 2, 3, 1, 2, 3, 4, 5, 1, 1, 1, 3, 4, 5, 1, 3, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5, 2, 5, 1, 4, 1, 4, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 4, 5, 1, 2, 3, 4, 5, 1, 3, 5, 1, 2, 3, 4, 5, 3, 4, 2, 3, 4, 5, 1, 2, 4, 1, 2, 3, 4, 5, 1, 3, 5, 1, 3, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 1, 2, 3, 4, 5, 3, 1, 4, 2, 3, 5, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 3, 2, 5, 5, 3, 4, 5, 5, 1, 2, 4, 2, 4, 2, 3, 5, 1, 2, 3, 4, 5, 4, 2, 2, 4, 4, 5, 3, 5, 2, 3, 5, 1, 4, 1, 2, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 4, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 3, 5, 2, 3, 4, 1, 2, 3, 4, 5, 2, 3, 5, 3, 5, 3, 5, 1, 2, 3, 4, 1, 2, 3, 4, 5, 2, 1, 2, 5, 5, 1, 2, 3, 4, 5, 1, 4, 3, 5, 1, 2, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 1, 3, 5, 3, 5, 4, 1, 2, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 5, 1, 2, 3, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 2, 3, 1, 4, 1, 2, 3, 4, 5, 3, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 5, 2, 4, 1, 2, 3, 4, 5, 1, 2, 4, 2, 1, 2, 3, 4, 5, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 4, 1, 2, 3, 5, 2, 5, 5, 1, 1, 2, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 2, 1, 2, 3, 4, 5, 3, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 1, 4, 1, 4, 5, 3, 1, 2, 4, 5, 3, 1, 2, 3, 4, 5, 1, 2, 4, 5, 2, 4, 1, 4, 1, 3, 5, 1, 2, 3, 4, 5, 1, 5, 1, 2, 3, 5, 1, 3, 4, 5, 4, 1, 1, 5, 3, 5, 1, 2, 3, 4, 5, 2, 5, 3, 5, 5, 1, 2, 3, 4, 5, 3, 3, 5, 1, 2, 4, 5, 4, 1, 2, 4, 5, 1, 2, 3, 4, 5, 2, 4, 5, 2, 3, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 5, 1, 2, 3, 4, 5, 2, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 4, 3, 1, 1, 2, 3, 4, 5, 3, 1, 2, 3, 4, 1, 2, 3, 4, 4, 1, 2, 4, 5, 1, 2, 3, 4, 5, 2, 4, 1, 2, 4, 1, 2, 4, 5, 2, 3, 4, 1, 1, 1, 1, 4, 5, 4, 1, 3, 3, 3, 4, 4, 5, 2, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 5, 3, 5, 2, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 4, 5, 4, 5, 3, 2, 1, 3, 5, 3, 1, 2, 3, 4, 5, 2, 2, 3, 4, 5, 5, 1, 2, 3, 4, 5, 1, 2, 3, 2, 4, 4, 1, 5, 1, 2, 3, 4, 5, 3, 1, 2, 3, 4, 5, 3, 2, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 5, 1, 4, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5, 3, 5, 1, 1, 3, 4, 5, 1, 2, 3, 4, 5, 2, 4, 4, 1, 1, 2, 3, 4, 5, 1, 4, 1, 2, 3, 4, 5, 2, 4, 3, 5, 3, 5, 1, 3, 4, 5, 4, 1, 4, 2, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 4, 5, 1, 3, 4, 5, 3, 5, 1, 3, 2, 5, 1, 2, 3, 4, 5, 3, 4, 5, 2, 3, 5, 1, 2, 3, 4, 5, 1, 3, 5, 1, 5, 1, 3, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 5, 1, 3, 4, 5, 1, 2, 4, 5, 1, 5, 2, 4, 1, 2, 3, 4, 5, 3, 4, 5, 1, 2, 3, 4, 5, 4, 1, 2, 3, 4, 5, 2, 5, 1, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 2, 4, 5, 5, 1, 2, 3, 4, 5, 4, 2, 5, 1, 2, 3, 4, 5, 5, 3, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 3, 4, 1, 3, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 4, 5, 1, 3, 3, 4, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 1, 2, 3, 4, 5, 3, 5, 1, 4, 5, 3, 4, 5, 1, 2, 3, 4, 5, 2, 4, 2, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 5, 2, 2, 1, 2, 3, 4, 5, 2, 3, 1, 2, 1, 3, 4, 5, 1, 2, 5, 1, 2, 3, 5, 5, 1, 2, 3, 5, 1, 1, 5, 1, 3, 5, 1, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 3, 5, 1, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5], \"Freq\": [0.9990622401237488, 0.9973524808883667, 0.9987494349479675, 0.9975931644439697, 0.9997798800468445, 0.0006395934615284204, 0.5324082374572754, 0.4624793827533722, 5.329945634002797e-05, 0.0044771539978682995, 0.9988700747489929, 0.9980771541595459, 0.1357777714729309, 0.8568475842475891, 0.0004991829628124833, 0.007238153368234634, 0.0585038848221302, 0.8879767656326294, 0.05329463258385658, 0.12778303027153015, 0.4039129614830017, 0.1386866718530655, 0.03290221840143204, 0.2966938316822052, 0.9579209089279175, 0.01704864762723446, 0.0018646959215402603, 0.02317550592124462, 0.999976634979248, 0.9996373653411865, 0.9982343316078186, 0.0016234972281381488, 0.9818872809410095, 0.017069846391677856, 0.0025961112696677446, 0.016333866864442825, 0.980140209197998, 0.0002163426106562838, 0.0006490278174169362, 0.017497682943940163, 0.00046046535135246813, 0.9784888625144958, 0.003683722810819745, 0.9992343783378601, 0.9273369908332825, 0.07258421927690506, 0.9992384910583496, 0.6005289554595947, 0.07240861654281616, 0.0042697954922914505, 0.2802942991256714, 0.04252004995942116, 0.0025640942621976137, 0.9948685765266418, 0.998950183391571, 0.2107781618833542, 0.22311948239803314, 0.35360583662986755, 0.0009755989885888994, 0.21155864000320435, 0.9859454035758972, 0.01371909212321043, 0.05971219763159752, 0.05118188261985779, 0.8888587355613708, 0.0002843438123818487, 0.00012199816410429776, 0.01994669996201992, 0.9798892736434937, 0.0002490290498826653, 0.043019767850637436, 0.0680471882224083, 0.8670568466186523, 0.02160326950252056, 0.055983711034059525, 0.9268072247505188, 0.017225757241249084, 0.019705386832356453, 0.9777625799179077, 0.0025022714398801327, 0.0022470790427178144, 0.7470204830169678, 0.13231106102466583, 0.021366294473409653, 0.09708143025636673, 0.23862417042255402, 0.30745580792427063, 0.01747174561023712, 0.33483603596687317, 0.10154718905687332, 0.9977689981460571, 0.05831537023186684, 0.16036728024482727, 0.24805901944637299, 0.2700730562210083, 0.26314812898635864, 0.999466598033905, 0.04413166642189026, 0.9557853937149048, 0.9818916320800781, 0.009040433913469315, 0.008538187481462955, 0.09367210417985916, 0.20756304264068604, 0.6987017393112183, 0.00041788662201724946, 0.44295981526374817, 0.00041788662201724946, 0.0010447165695950389, 0.5551623702049255, 0.8621467351913452, 0.0015615064185112715, 0.06324101239442825, 0.06480251997709274, 0.008197908289730549, 0.9967231750488281, 0.9986714720726013, 0.9942346811294556, 0.9998791813850403, 0.998920738697052, 0.016346270218491554, 0.004301650449633598, 0.9790555834770203, 0.9992252588272095, 0.0006068616639822721, 0.4586525559425354, 0.5407137274742126, 0.8951789140701294, 0.10471013188362122, 0.9989718794822693, 0.9962825179100037, 0.0033567468635737896, 0.5866774320602417, 0.024108337238430977, 0.2667577266693115, 0.1049639880657196, 0.017473392188549042, 0.9992514848709106, 0.9999279379844666, 0.8478330373764038, 0.15197181701660156, 0.9976285696029663, 0.9996212720870972, 0.9984171390533447, 0.0014596740948036313, 0.0016630907775834203, 0.9888737797737122, 0.009313308633863926, 0.9954764246940613, 0.0034776469692587852, 0.006460131611675024, 0.7671406269073486, 0.13626840710639954, 0.09003808349370956, 0.0012741296086460352, 0.00039203985943458974, 0.14378061890602112, 0.8046128153800964, 0.04993607848882675, 0.03778867423534393, 0.1420249491930008, 0.20832139253616333, 0.5935542583465576, 0.018319949507713318, 0.0031857462599873543, 0.9965014457702637, 0.0002598656283225864, 0.03690091893076897, 0.9628021121025085, 0.9992190003395081, 0.001588681829161942, 0.09237050265073776, 0.0027234547305852175, 0.9030521512031555, 0.09093768894672394, 0.23332330584526062, 0.15128470957279205, 0.5244510173797607, 0.024950765073299408, 0.9750919938087463, 0.0356602668762207, 0.002307428978383541, 0.9619881510734558, 0.05050956457853317, 0.8119495511054993, 0.001320511568337679, 0.03350798040628433, 0.10283483564853668, 0.9979332089424133, 0.9669429659843445, 0.0331549271941185, 0.9895529747009277, 0.009807264432311058, 0.004634082783013582, 0.9950038194656372, 0.0005911024636588991, 0.07861662656068802, 0.0017733074491843581, 0.9188687801361084, 0.3140767514705658, 0.3848457932472229, 0.17572224140167236, 0.04070785269141197, 0.08459927141666412, 0.9955204129219055, 0.9975329041481018, 0.997603178024292, 0.9980193972587585, 0.9981459379196167, 0.000354200106812641, 0.11865703016519547, 0.22642241418361664, 0.6541190147399902, 0.0005313001456670463, 0.9962245225906372, 0.0029129371978342533, 0.06966837495565414, 0.9299213290214539, 0.9892918467521667, 0.00039164363988675177, 0.009399447590112686, 0.0007832872797735035, 0.009007126092910767, 0.4763236343860626, 0.4568241536617279, 0.0038328194059431553, 0.0540427528321743, 0.0001487159461248666, 0.47897687554359436, 0.5064521431922913, 0.002676886972039938, 0.011785739101469517, 0.9957952499389648, 0.0007556144264526665, 0.2892114222049713, 0.7098997831344604, 0.022318990901112556, 0.9773012399673462, 0.996979832649231, 0.0010114997858181596, 0.9902582764625549, 0.008091998286545277, 0.9986000657081604, 0.2035820335149765, 0.015095680952072144, 0.17066505551338196, 0.04486771672964096, 0.5656687021255493, 0.21233856678009033, 0.01415590476244688, 0.5710678696632385, 0.01669888198375702, 0.18580684065818787, 0.003386217635124922, 0.18059827387332916, 0.23548322916030884, 0.5805952548980713, 0.00032858431222848594, 0.0044358884915709496, 0.1757926046848297, 0.06785266101360321, 0.7514723539352417, 0.017323320731520653, 0.9816548824310303, 0.0014436100609600544, 0.330596387386322, 0.001191970077343285, 0.6628755927085876, 0.005258691497147083, 0.07387951016426086, 0.0011308088432997465, 0.005465575959533453, 0.9027624130249023, 0.016773665323853493, 0.28251388669013977, 0.343792200088501, 0.021444575861096382, 0.1936235874891281, 0.15865591168403625, 0.0414687916636467, 0.08344954252243042, 0.8754522800445557, 0.03745383769273758, 0.00675397040322423, 0.9559938311576843, 0.992024302482605, 0.007750189863145351, 0.9982887506484985, 0.9997241497039795, 0.023941807448863983, 0.048990748822689056, 0.8434988856315613, 0.030861403793096542, 0.05272733047604561, 0.9984822273254395, 0.00021301154629327357, 0.3238840699195862, 0.6703473329544067, 0.0012780693359673023, 0.004260231275111437, 0.49473029375076294, 0.02993646077811718, 0.31658241152763367, 0.026648640632629395, 0.13211843371391296, 0.06843510270118713, 0.8623375296592712, 0.00027594799757935107, 0.06567562371492386, 0.0033113760873675346, 0.6521541476249695, 0.2790047228336334, 0.003919293638318777, 0.0649133026599884, 0.820987343788147, 0.10511669516563416, 0.010770970955491066, 0.037698399275541306, 0.025531191378831863, 0.023613711819052696, 0.0318150669336319, 0.9168805480003357, 0.02769891545176506, 3.0948507628636435e-05, 0.996410608291626, 0.0003235641634091735, 0.08923899382352829, 0.11784207075834274, 0.7838665246963501, 0.008736232295632362, 0.012031976133584976, 0.9877499938011169, 0.31642967462539673, 0.42553436756134033, 0.09277807921171188, 0.09696747362613678, 0.06828314065933228, 0.9900174140930176, 0.0039799693040549755, 0.004974961746484041, 0.9984439015388489, 4.7107918362598866e-05, 0.4729163944721222, 0.19521521031856537, 0.2408156841993332, 0.09101250022649765, 0.00010188834858126938, 0.3451977074146271, 0.3708735704421997, 0.28375905752182007, 0.021062320098280907, 0.5594199299812317, 0.4101547598838806, 0.0018289410509169102, 0.0075517562218010426, 0.09236828237771988, 0.32292747497558594, 0.239506796002388, 0.051245417445898056, 0.2939155101776123, 0.9940859079360962, 0.009446370415389538, 0.0010305132018402219, 0.8419292569160461, 0.14770689606666565, 0.0006661026854999363, 0.9991540312767029, 0.9978727102279663, 0.9974743127822876, 0.9815504550933838, 0.0005101613351143897, 0.013264195062220097, 0.004081290680915117, 0.5346919298171997, 0.2418469786643982, 0.04517415165901184, 0.0993201732635498, 0.07901541143655777, 0.08285314589738846, 0.42476603388786316, 0.2856620252132416, 0.13793236017227173, 0.06878206133842468, 0.9956185817718506, 0.9992183446884155, 0.5046865940093994, 0.13517367839813232, 0.18765327334403992, 0.15528298914432526, 0.017145128920674324, 0.997363269329071, 0.006282160524278879, 0.039910197257995605, 0.00036953884409740567, 0.9534102082252502, 0.00036953884409740567, 0.008373760618269444, 0.42599132657051086, 0.5582794547080994, 0.0006388229667209089, 0.006716273725032806, 0.046688228845596313, 0.007192511111497879, 0.943354606628418, 0.002776056993752718, 0.9964824318885803, 0.9986851215362549, 0.0005576296825893223, 0.9992724061012268, 0.0005576296825893223, 0.9968482851982117, 0.8698124885559082, 0.061821386218070984, 0.04111840948462486, 0.0270288847386837, 0.9984825849533081, 0.07957427948713303, 0.015369039960205555, 0.904475212097168, 0.00021545383788179606, 0.00035908972495235503, 0.0027046126779168844, 0.9215967655181885, 0.04192149639129639, 0.0338076576590538, 0.9979286789894104, 0.0019287372706457973, 0.9188591241836548, 0.0809759721159935, 0.9981804490089417, 0.0009394639637321234, 0.0009394639637321234, 0.041099924594163895, 0.13367529213428497, 0.024772556498646736, 0.6886448860168457, 0.1117982268333435, 0.011944998987019062, 0.9877595901489258, 0.23938463628292084, 8.53421151987277e-05, 0.7598862051963806, 0.0005973948282189667, 0.07216555625200272, 0.002975899027660489, 0.029758991673588753, 0.8950016498565674, 0.9966369867324829, 0.9967766404151917, 0.9973867535591125, 0.0017559626139700413, 0.9973961114883423, 0.9994069933891296, 0.07197203487157822, 0.14162705838680267, 0.12439431995153427, 0.14119261503219604, 0.5208921432495117, 0.9953392744064331, 0.9975356459617615, 0.9971996545791626, 0.0016731537180021405, 0.999396026134491, 0.5290404558181763, 0.12710806727409363, 0.0007360050221905112, 0.22852957248687744, 0.11466958373785019, 0.9989199042320251, 0.11308679729700089, 0.8867363929748535, 0.9724283218383789, 0.010642936453223228, 0.015684327110648155, 0.0011203091125935316, 0.9984211921691895, 0.9762548208236694, 0.0005417618085630238, 0.010564355179667473, 0.012460521422326565, 0.8409673571586609, 0.00016444413631688803, 0.005919989198446274, 0.07811097055673599, 0.0749865248799324, 0.9892569780349731, 0.009929806925356388, 0.9992091059684753, 0.9995041489601135, 0.9974244832992554, 0.0029999339021742344, 0.00021428099717013538, 0.9953352212905884, 0.0012856859248131514, 0.2071082442998886, 0.13744457066059113, 0.028614865615963936, 0.4106186628341675, 0.21622399985790253, 0.07499682903289795, 0.2852852940559387, 0.19195222854614258, 0.2733915150165558, 0.17440065741539001, 0.31994906067848206, 0.6799913644790649, 0.6354583501815796, 0.2028406709432602, 0.00567081430926919, 0.011014466173946857, 0.14493292570114136, 0.9104843735694885, 0.08881300687789917, 0.14746202528476715, 0.2824840247631073, 0.03655450418591499, 0.1990402340888977, 0.3344449996948242, 0.0028536776080727577, 0.7230505347251892, 0.20818468928337097, 0.006108653265982866, 0.05979346111416817, 0.0013928463449701667, 0.15890055894851685, 0.8380292654037476, 0.0005803526728413999, 0.0011607053456827998, 0.9970080852508545, 0.9997348189353943, 0.999473512172699, 0.9997339844703674, 0.0008855893393047154, 0.9666208028793335, 0.006199125666171312, 0.02612488530576229, 0.9960750341415405, 0.05476321652531624, 0.0010607886360958219, 0.9380024075508118, 0.0060995351523160934, 0.022853614762425423, 0.06552333384752274, 0.9108177423477173, 0.000867858761921525, 0.9964399337768555, 0.0025031613186001778, 0.22691448032855988, 0.744253933429718, 0.026254087686538696, 0.12785162031650543, 0.09982984513044357, 0.39924705028533936, 0.09545482695102692, 0.2776144742965698, 0.9885037541389465, 0.010963073000311852, 0.9982722401618958, 0.01874775066971779, 0.9811322689056396, 0.00012516570859588683, 0.6503610014915466, 0.34921231865882874, 0.00031291425693780184, 0.021682104095816612, 0.0011720056645572186, 0.9774526953697205, 0.9993841052055359, 0.9991779327392578, 0.9998646974563599, 0.9797219634056091, 0.019072456285357475, 0.0010038134641945362, 0.9955542683601379, 0.0015839870320633054, 0.997911810874939, 0.9953905344009399, 0.9980791807174683, 0.9945939779281616, 0.9973582625389099, 0.001857277937233448, 0.9979654550552368, 0.10659550130367279, 0.19736923277378082, 0.4986616373062134, 0.08916185796260834, 0.10820737481117249, 0.3964827060699463, 0.06867394596338272, 0.4521677494049072, 0.0010931246215477586, 0.08159853518009186, 0.9957184195518494, 0.9990282654762268, 0.9927515983581543, 0.00632901769131422, 0.02536124177277088, 0.9743698835372925, 0.6465235352516174, 0.2009238302707672, 0.00881336908787489, 0.10645990073680878, 0.03728194907307625, 0.42484134435653687, 0.028635071590542793, 0.27066102623939514, 0.27429237961769104, 0.0015800572000443935, 0.9685381650924683, 0.013756812550127506, 0.00029269815422594547, 0.014049511402845383, 0.0035123778507113457, 0.00559174083173275, 0.0035583805292844772, 0.9399207830429077, 0.05083400756120682, 0.9258505702018738, 0.03473913297057152, 0.039476290345191956, 0.9950465559959412, 0.9974141716957092, 0.9955406188964844, 0.9999443888664246, 0.04223604127764702, 0.9572979211807251, 0.0004710339126177132, 0.9985331296920776, 0.6147518157958984, 0.18250860273838043, 0.009118773974478245, 0.018903153017163277, 0.17472103238105774, 0.9945574998855591, 0.22345995903015137, 0.65151047706604, 0.047819655388593674, 0.07702841609716415, 0.9978891015052795, 0.003051239298656583, 0.8311575651168823, 0.035394374281167984, 0.05583767592906952, 0.07475536316633224, 0.9993276000022888, 0.9890559315681458, 0.010411115363240242, 0.02693723328411579, 0.9731075763702393, 0.9977000951766968, 0.0005426506977528334, 0.9992913007736206, 0.16677440702915192, 0.6334240436553955, 0.11121989041566849, 0.03844056650996208, 0.05015011131763458, 0.9958903789520264, 0.18760091066360474, 0.024332154542207718, 0.0503675602376461, 0.6752172708511353, 0.06241197884082794, 0.9962909817695618, 0.8992305397987366, 0.10074605792760849, 0.9996140003204346, 0.00024448445765301585, 0.16019845008850098, 0.3811512887477875, 0.29735422134399414, 0.16105413436889648, 0.17826279997825623, 0.3284134864807129, 0.1260344386100769, 0.17802774906158447, 0.18926319479942322, 0.09484963119029999, 0.5256681442260742, 0.031209195032715797, 0.054522085934877396, 0.2937612533569336, 0.031901318579912186, 0.7360004782676697, 0.0854286253452301, 0.022223392501473427, 0.12449878454208374, 0.9955800175666809, 0.9987832903862, 0.9973409175872803, 0.99662184715271, 0.9961233735084534, 0.0005324424710124731, 0.9269823431968689, 0.0037270972970873117, 0.06868507713079453, 0.07252886891365051, 0.8283730149269104, 0.045029010623693466, 0.009005802683532238, 0.045029010623693466, 0.9971709847450256, 0.998292088508606, 0.9984091520309448, 0.9697138071060181, 0.0026713877450674772, 0.02724815532565117, 0.000534277583938092, 0.00015103851910680532, 0.0052863480523228645, 0.038061708211898804, 0.9240536689758301, 0.032322242856025696, 0.0005864186678081751, 0.9992573857307434, 0.9993147253990173, 0.9980111122131348, 0.28445014357566833, 0.1731700748205185, 0.22477048635482788, 0.1494658887386322, 0.1681014895439148, 0.998639702796936, 0.9941380023956299, 0.000847906107082963, 0.017684899270534515, 0.001029600272886455, 0.9792104363441467, 0.0012112944386899471, 0.9784373641014099, 0.020719850435853004, 0.00976562686264515, 0.9899261593818665, 0.003022582270205021, 0.9966965317726135, 0.17528709769248962, 0.0017978163668885827, 0.0008989081834442914, 0.8218268156051636, 0.9980272054672241, 0.9996530413627625, 0.9976239204406738, 0.9973742961883545, 0.0032700796145945787, 0.9095382690429688, 0.0015722356038168073, 0.004559482913464308, 0.0822279155254364, 0.002043906133621931, 0.008029495365917683, 0.4430392384529114, 0.0016373873222619295, 0.5472652316093445, 0.0008125469321385026, 0.9417418837547302, 0.047127723693847656, 0.009750563651323318, 0.02165866643190384, 0.3734162747859955, 0.003914216533303261, 0.60096275806427, 0.03319134935736656, 0.9659533500671387, 0.001966494368389249, 0.9976681470870972, 0.9945199489593506, 0.9985760450363159, 0.00015239535423461348, 0.0016255505615845323, 0.10418763011693954, 0.8778480887413025, 0.01625550538301468, 0.001156213111244142, 0.030061541125178337, 0.968906581401825, 0.001221274258568883, 0.2781452238559723, 0.7202464938163757, 0.001771483919583261, 0.0005904946592636406, 0.032477203756570816, 0.9636872410774231, 0.0023619786370545626, 0.8133235573768616, 0.1678352952003479, 0.0187641941010952, 0.017283517867326736, 0.9823951125144958, 0.6294896602630615, 0.3696070611476898, 0.0007549849688075483, 0.34227412939071655, 0.2666177451610565, 0.38636723160743713, 0.0021092381794005632, 0.002636547666043043, 0.008560589514672756, 0.014868391677737236, 0.9218403100967407, 0.0018022293224930763, 0.05271520838141441, 0.002959419507533312, 0.9736490249633789, 0.023379415273666382, 0.01092556957155466, 0.000606976100243628, 0.9869431257247925, 0.001820928300730884, 0.006070938427001238, 0.8988184332847595, 0.019810430705547333, 0.07540744543075562, 0.9968315362930298, 0.002434265101328492, 0.00045936513924971223, 0.9995785355567932, 0.01388865988701582, 0.0630236566066742, 0.8931951522827148, 0.02339467592537403, 0.006543102208524942, 0.9049561023712158, 0.09044697880744934, 0.004376466851681471, 0.09182252734899521, 0.2970767915248871, 0.11974827200174332, 0.16815289855003357, 0.32327380776405334, 0.9988468885421753, 0.0011165576288476586, 0.00967683270573616, 0.0236338023096323, 0.8921295404434204, 0.07350670546293259, 0.9970240592956543, 0.997809886932373, 0.004832285922020674, 0.00025433083646930754, 0.9939249157905579, 0.0010173233458772302, 0.00829704012721777, 0.021572303026914597, 0.1999586522579193, 0.001244555925950408, 0.7687207460403442, 0.000263369147432968, 0.1830415576696396, 0.34773507714271545, 0.45062461495399475, 0.018348051235079765, 0.9978485107421875, 0.0044549377635121346, 0.02851160243153572, 0.0008909875759854913, 0.9658305644989014, 0.9991795420646667, 0.03688862919807434, 0.831588089466095, 0.045162003487348557, 0.009336010552942753, 0.07704106718301773, 0.9965947866439819, 0.9922086000442505, 0.9993649125099182, 0.049446165561676025, 0.5842551589012146, 0.3191942870616913, 0.02205776795744896, 0.024998804554343224, 0.9998488426208496, 0.9959779381752014, 0.7027482986450195, 0.00013682794815395027, 0.24464836716651917, 0.0008893816266208887, 0.051515720784664154, 0.09172988682985306, 0.4562366008758545, 0.0344732441008091, 0.41445547342300415, 0.0031200642697513103, 0.1091494932770729, 0.6021485328674316, 0.26165780425071716, 0.02426878735423088, 0.0027695384342223406, 0.9980834722518921, 0.9995140433311462, 0.006894479505717754, 0.9514381885528564, 0.0405050665140152, 0.025327691808342934, 0.11957211047410965, 0.05962726101279259, 0.6898024678230286, 0.10567761212587357, 0.12246984988451004, 0.0077485316433012486, 0.08566432446241379, 0.7533294558525085, 0.03077889047563076, 0.0009780126856639981, 0.34892481565475464, 0.44296449422836304, 0.1453477293252945, 0.06176526099443436, 0.12124758958816528, 0.012933076359331608, 0.015627466142177582, 0.8498108386993408, 0.03961803764104843, 0.9599255323410034, 0.9961028695106506, 0.9993723034858704, 0.9970544576644897, 0.3056684732437134, 0.12548495829105377, 0.07734526693820953, 0.14726538956165314, 0.344155490398407, 0.26647573709487915, 0.15110629796981812, 0.054212167859077454, 0.2713305354118347, 0.25690093636512756, 0.9970906972885132, 0.5165296792984009, 0.23860400915145874, 0.15825669467449188, 0.027341680601239204, 0.0592971071600914, 0.0014539867406710982, 0.9974349141120911, 0.9996910095214844, 0.00015360955148935318, 0.00015360955148935318, 0.012579069472849369, 0.9828827381134033, 0.004002430941909552, 0.9883118867874146, 9.771721670404077e-05, 0.003810971276834607, 0.005667598452419043, 0.002149778651073575, 0.9877002835273743, 0.011980191804468632, 0.9994181394577026, 0.0001245853491127491, 0.008845560252666473, 0.003862145822495222, 0.9872143268585205, 0.00011060824908781797, 0.21856190264225006, 0.0012166907545179129, 0.7801199555397034, 0.049309149384498596, 0.7062857747077942, 0.1380337029695511, 0.0062234848737716675, 0.10021406412124634, 0.9981090426445007, 0.06390901654958725, 0.476706326007843, 0.27590829133987427, 0.07992063462734222, 0.10349138081073761, 0.9988675117492676, 0.9987614154815674, 0.0700361356139183, 0.466981440782547, 0.2635589838027954, 0.07125511765480042, 0.1281779408454895, 0.973171591758728, 0.02563476376235485, 0.9991582036018372, 0.9974165558815002, 0.0015136535512283444, 0.20888419449329376, 0.001892067026346922, 0.7878566980361938, 0.000665586965624243, 0.6073480844497681, 0.3919197916984558, 0.003001699922606349, 0.0007504249806515872, 0.9455354809761047, 0.05065368488430977, 0.9976667165756226, 0.5198259353637695, 0.2557230591773987, 0.16862747073173523, 0.05584282428026199, 0.9998213648796082, 0.992940366268158, 0.006792653352022171, 0.8510932326316833, 0.14864984154701233, 0.00013879536709282547, 0.9961066246032715, 0.0011602872982621193, 0.0029007182456552982, 0.8451310992240906, 0.005371337290853262, 0.007446626666933298, 0.09192311763763428, 0.05005109682679176, 0.5240110158920288, 0.014108285307884216, 0.08033242076635361, 0.3110761344432831, 0.07046432793140411, 0.8106504082679749, 0.00021634652512148023, 0.0019471186678856611, 0.07247608155012131, 0.11466365307569504, 0.37084147334098816, 0.16984453797340393, 0.015007201582193375, 0.24431155622005463, 0.20000119507312775, 0.5808360576629639, 0.07098006457090378, 0.2901557683944702, 0.038870032876729965, 0.019114499911665916, 0.057797130197286606, 0.8471677303314209, 0.0948626846075058, 0.9970346689224243, 0.0012431853683665395, 0.00832277536392212, 0.138265460729599, 0.8051613569259644, 0.0359758660197258, 0.012081447057425976, 0.07086621224880219, 0.6224319934844971, 0.03696950152516365, 0.006433653645217419, 0.2632996737957001], \"Term\": [\"adobada\", \"adobado\", \"agua\", \"aguas\", \"ahi\", \"amazing\", \"amazing\", \"amazing\", \"amazing\", \"amazing\", \"annoyed\", \"apologized\", \"appetizer\", \"appetizer\", \"appetizer\", \"appetizer\", \"appetizers\", \"appetizers\", \"appetizers\", \"area\", \"area\", \"area\", \"area\", \"area\", \"arrived\", \"arrived\", \"arrived\", \"arrived\", \"asada\", \"asian\", \"asked\", \"asked\", \"asking\", \"asking\", \"atmosphere\", \"atmosphere\", \"atmosphere\", \"atmosphere\", \"atmosphere\", \"attentive\", \"attentive\", \"attentive\", \"attentive\", \"attitude\", \"authentic\", \"authentic\", \"bacchanal\", \"bad\", \"bad\", \"bad\", \"bad\", \"bad\", \"bakersfield\", \"bakersfield\", \"bao\", \"bar\", \"bar\", \"bar\", \"bar\", \"bar\", \"battered\", \"battered\", \"bean\", \"bean\", \"bean\", \"bean\", \"beans\", \"beans\", \"beans\", \"beef\", \"beef\", \"beef\", \"beef\", \"beef\", \"beer\", \"beer\", \"beer\", \"beers\", \"beers\", \"beers\", \"best\", \"best\", \"best\", \"best\", \"best\", \"better\", \"better\", \"better\", \"better\", \"better\", \"birria\", \"bit\", \"bit\", \"bit\", \"bit\", \"bit\", \"blackened\", \"bland\", \"bland\", \"bomb\", \"bomb\", \"bomb\", \"bread\", \"bread\", \"bread\", \"breakfast\", \"breakfast\", \"breakfast\", \"breakfast\", \"breakfast\", \"brought\", \"brought\", \"brought\", \"brought\", \"brought\", \"brussel\", \"brussels\", \"buche\", \"buffet\", \"buffets\", \"bun\", \"bun\", \"bun\", \"buns\", \"burrito\", \"burrito\", \"burrito\", \"burritos\", \"burritos\", \"cabeza\", \"calamari\", \"calamari\", \"came\", \"came\", \"came\", \"came\", \"came\", \"canned\", \"carne\", \"carnitas\", \"carnitas\", \"carolina\", \"casino\", \"cauliflower\", \"cauliflower\", \"ceviche\", \"ceviche\", \"ceviche\", \"charged\", \"charged\", \"cheap\", \"cheap\", \"cheap\", \"cheap\", \"cheese\", \"cheese\", \"cheese\", \"cheese\", \"cheese\", \"chicken\", \"chicken\", \"chicken\", \"chicken\", \"chicken\", \"chile\", \"chile\", \"chili\", \"chili\", \"chili\", \"chinese\", \"chipotle\", \"chipotle\", \"chipotle\", \"chipotle\", \"chips\", \"chips\", \"chips\", \"chips\", \"chocolate\", \"chocolate\", \"cilantro\", \"cilantro\", \"cilantro\", \"clean\", \"clean\", \"clean\", \"clean\", \"clean\", \"cochinita\", \"cocktails\", \"cocktails\", \"cod\", \"cod\", \"coffee\", \"coffee\", \"combo\", \"combo\", \"combo\", \"combo\", \"come\", \"come\", \"come\", \"come\", \"come\", \"comida\", \"complained\", \"condesa\", \"cookie\", \"cookies\", \"corn\", \"corn\", \"corn\", \"corn\", \"corn\", \"correct\", \"correct\", \"crab\", \"crab\", \"customers\", \"customers\", \"customers\", \"customers\", \"definitely\", \"definitely\", \"definitely\", \"definitely\", \"definitely\", \"delicious\", \"delicious\", \"delicious\", \"delicious\", \"delicious\", \"des\", \"dessert\", \"dessert\", \"dessert\", \"desserts\", \"desserts\", \"diced\", \"diego\", \"diego\", \"diego\", \"dim\", \"dining\", \"dining\", \"dining\", \"dining\", \"dining\", \"dinner\", \"dinner\", \"dinner\", \"dinner\", \"dinner\", \"dish\", \"dish\", \"dish\", \"dish\", \"dishes\", \"dishes\", \"dishes\", \"dishes\", \"dishes\", \"draft\", \"draft\", \"draft\", \"drinks\", \"drinks\", \"drinks\", \"drinks\", \"dry\", \"dry\", \"dry\", \"dry\", \"dry\", \"eat\", \"eat\", \"eat\", \"eat\", \"eat\", \"egg\", \"egg\", \"egg\", \"eggs\", \"eggs\", \"eggs\", \"elote\", \"elote\", \"employee\", \"enchilada\", \"enjoyed\", \"enjoyed\", \"enjoyed\", \"enjoyed\", \"enjoyed\", \"est\", \"excellent\", \"excellent\", \"excellent\", \"excellent\", \"excellent\", \"experience\", \"experience\", \"experience\", \"experience\", \"experience\", \"fast\", \"fast\", \"fast\", \"fast\", \"fast\", \"favorite\", \"favorite\", \"favorite\", \"favorite\", \"finally\", \"finally\", \"finally\", \"finally\", \"finally\", \"fish\", \"fish\", \"fish\", \"fish\", \"fish\", \"flag\", \"flavor\", \"flavor\", \"flavor\", \"flavor\", \"flavor\", \"flour\", \"flour\", \"food\", \"food\", \"food\", \"food\", \"food\", \"forever\", \"forever\", \"forever\", \"frescas\", \"fresh\", \"fresh\", \"fresh\", \"fresh\", \"fresh\", \"fried\", \"fried\", \"fried\", \"fried\", \"friendly\", \"friendly\", \"friendly\", \"friendly\", \"friendly\", \"fries\", \"fries\", \"fries\", \"fries\", \"fries\", \"frybread\", \"fun\", \"fun\", \"fun\", \"fun\", \"fusion\", \"fusion\", \"gelato\", \"gentleman\", \"girl\", \"girl\", \"girl\", \"girl\", \"going\", \"going\", \"going\", \"going\", \"going\", \"good\", \"good\", \"good\", \"good\", \"good\", \"gorditas\", \"gordo\", \"got\", \"got\", \"got\", \"got\", \"got\", \"grapefruit\", \"greasy\", \"greasy\", \"greasy\", \"greasy\", \"greasy\", \"great\", \"great\", \"great\", \"great\", \"great\", \"green\", \"green\", \"green\", \"green\", \"greet\", \"grocery\", \"ground\", \"ground\", \"ground\", \"guild\", \"guy\", \"guy\", \"guy\", \"guy\", \"hangout\", \"happy\", \"happy\", \"happy\", \"happy\", \"happy\", \"hole\", \"hole\", \"hole\", \"hole\", \"horchata\", \"horchata\", \"horrible\", \"horrible\", \"hostess\", \"hostess\", \"hostess\", \"hot\", \"hot\", \"hot\", \"hot\", \"hot\", \"hotel\", \"hotel\", \"hour\", \"hour\", \"hour\", \"hour\", \"ice\", \"ice\", \"ice\", \"ice\", \"iceberg\", \"ignored\", \"informed\", \"informed\", \"ipa\", \"italian\", \"items\", \"items\", \"items\", \"items\", \"items\", \"jamaica\", \"japanese\", \"kale\", \"kale\", \"kimchi\", \"know\", \"know\", \"know\", \"know\", \"know\", \"knowledgeable\", \"korean\", \"korean\", \"lady\", \"lady\", \"lady\", \"lady\", \"lard\", \"later\", \"later\", \"later\", \"later\", \"left\", \"left\", \"left\", \"left\", \"left\", \"legit\", \"legit\", \"legs\", \"lengua\", \"les\", \"lettuce\", \"lettuce\", \"lettuce\", \"lettuce\", \"like\", \"like\", \"like\", \"like\", \"like\", \"little\", \"little\", \"little\", \"little\", \"little\", \"lobster\", \"lobster\", \"long\", \"long\", \"long\", \"long\", \"long\", \"los\", \"los\", \"lot\", \"lot\", \"lot\", \"lot\", \"lot\", \"love\", \"love\", \"love\", \"love\", \"love\", \"loved\", \"loved\", \"loved\", \"loved\", \"loved\", \"macayo\", \"mahi\", \"management\", \"manager\", \"mango\", \"mango\", \"mango\", \"mango\", \"marg\", \"margarita\", \"margarita\", \"margarita\", \"margarita\", \"margaritas\", \"margaritas\", \"margaritas\", \"margaritas\", \"masa\", \"meat\", \"meat\", \"meat\", \"meat\", \"menu\", \"menu\", \"menu\", \"menu\", \"menu\", \"menudo\", \"menudo\", \"messed\", \"mex\", \"mex\", \"mexican\", \"mexican\", \"mexican\", \"mexican\", \"mild\", \"mild\", \"mild\", \"min\", \"mins\", \"minutes\", \"mistake\", \"mistake\", \"mistake\", \"moe\", \"mojito\", \"mojito\", \"mojitos\", \"mule\", \"mush\", \"mushy\", \"mushy\", \"muy\", \"nice\", \"nice\", \"nice\", \"nice\", \"nice\", \"night\", \"night\", \"night\", \"night\", \"night\", \"noda\", \"noodles\", \"octopus\", \"octopus\", \"onions\", \"onions\", \"order\", \"order\", \"order\", \"order\", \"order\", \"ordered\", \"ordered\", \"ordered\", \"ordered\", \"ordered\", \"orders\", \"orders\", \"orders\", \"orders\", \"orders\", \"outdoor\", \"outdoor\", \"outdoor\", \"outdoor\", \"paid\", \"paid\", \"paid\", \"palmas\", \"pancakes\", \"pas\", \"pastor\", \"patio\", \"patio\", \"patio\", \"pear\", \"people\", \"people\", \"people\", \"people\", \"people\", \"pepe\", \"perfect\", \"perfect\", \"perfect\", \"perfect\", \"pho\", \"phoenix\", \"phoenix\", \"phoenix\", \"phoenix\", \"phoenix\", \"phone\", \"pibil\", \"pibil\", \"pico\", \"pico\", \"pinto\", \"pizza\", \"pizza\", \"place\", \"place\", \"place\", \"place\", \"place\", \"plantain\", \"plate\", \"plate\", \"plate\", \"plate\", \"plate\", \"playa\", \"pollo\", \"pollo\", \"pool\", \"pork\", \"pork\", \"pork\", \"pork\", \"pork\", \"pretty\", \"pretty\", \"pretty\", \"pretty\", \"pretty\", \"price\", \"price\", \"price\", \"price\", \"price\", \"prices\", \"prices\", \"prices\", \"prices\", \"prices\", \"prickly\", \"prime\", \"proceeded\", \"processed\", \"qdoba\", \"quesadillas\", \"quesadillas\", \"quesadillas\", \"quesadillas\", \"quick\", \"quick\", \"quick\", \"quick\", \"quick\", \"quinoa\", \"ramen\", \"receipt\", \"received\", \"received\", \"received\", \"received\", \"red\", \"red\", \"red\", \"red\", \"red\", \"refried\", \"refried\", \"relleno\", \"response\", \"restaurant\", \"restaurant\", \"restaurant\", \"restaurant\", \"restaurant\", \"returned\", \"reyna\", \"rice\", \"rice\", \"rice\", \"rice\", \"rice\", \"robertos\", \"robertos\", \"roll\", \"roll\", \"rolls\", \"rolls\", \"room\", \"room\", \"room\", \"room\", \"rosa\", \"rude\", \"runny\", \"sabor\", \"sabor\", \"said\", \"said\", \"said\", \"said\", \"said\", \"salsa\", \"salsa\", \"salsa\", \"salsa\", \"san\", \"san\", \"san\", \"san\", \"sandwich\", \"sandwich\", \"sandwich\", \"sandwich\", \"sandwiches\", \"sandwiches\", \"sangria\", \"sangria\", \"santisima\", \"sashimi\", \"sauce\", \"sauce\", \"sauce\", \"sauce\", \"sauce\", \"sausage\", \"sausage\", \"sausage\", \"seafood\", \"seafood\", \"seafood\", \"seasoning\", \"seasoning\", \"seasoning\", \"seasoning\", \"seasoning\", \"seated\", \"seated\", \"seated\", \"section\", \"section\", \"server\", \"server\", \"server\", \"service\", \"service\", \"service\", \"service\", \"service\", \"shared\", \"shared\", \"shared\", \"shared\", \"shared\", \"shell\", \"shell\", \"shell\", \"shells\", \"shells\", \"shells\", \"shells\", \"shop\", \"shop\", \"shop\", \"shop\", \"showed\", \"showed\", \"shredded\", \"shredded\", \"shrimp\", \"shrimp\", \"shrimp\", \"shrimp\", \"shrimp\", \"slaw\", \"slaw\", \"slaw\", \"small\", \"small\", \"small\", \"small\", \"small\", \"smothered\", \"soft\", \"soft\", \"soft\", \"soft\", \"soft\", \"sopes\", \"soups\", \"sour\", \"sour\", \"sour\", \"sour\", \"space\", \"space\", \"space\", \"space\", \"space\", \"spicy\", \"spicy\", \"spicy\", \"spicy\", \"spicy\", \"spoke\", \"station\", \"station\", \"station\", \"station\", \"steamed\", \"street\", \"street\", \"street\", \"street\", \"street\", \"styrofoam\", \"suadero\", \"sum\", \"super\", \"super\", \"super\", \"super\", \"super\", \"sushi\", \"swordfish\", \"table\", \"table\", \"table\", \"table\", \"table\", \"taco\", \"taco\", \"taco\", \"taco\", \"taco\", \"tacos\", \"tacos\", \"tacos\", \"tacos\", \"tacos\", \"tako\", \"tamale\", \"tap\", \"tap\", \"tap\", \"taste\", \"taste\", \"taste\", \"taste\", \"taste\", \"tasted\", \"tasted\", \"tasted\", \"tasted\", \"tasted\", \"tasty\", \"tasty\", \"tasty\", \"tasty\", \"tasty\", \"tea\", \"tea\", \"tea\", \"tea\", \"tequila\", \"tequila\", \"tequilas\", \"tex\", \"thicker\", \"things\", \"things\", \"things\", \"things\", \"things\", \"think\", \"think\", \"think\", \"think\", \"think\", \"tijuana\", \"time\", \"time\", \"time\", \"time\", \"time\", \"toast\", \"toast\", \"told\", \"told\", \"told\", \"tomatoes\", \"tomatoes\", \"tomatoes\", \"took\", \"took\", \"took\", \"took\", \"took\", \"torta\", \"torta\", \"tortas\", \"tortilla\", \"tortilla\", \"tortilla\", \"tortilla\", \"tortillas\", \"tortillas\", \"tortillas\", \"tortillas\", \"town\", \"town\", \"town\", \"town\", \"town\", \"training\", \"tried\", \"tried\", \"tried\", \"tried\", \"tried\", \"tripa\", \"tripas\", \"try\", \"try\", \"try\", \"try\", \"try\", \"tuesdays\", \"tuesdays\", \"upset\", \"vampiro\", \"vegan\", \"vegan\", \"vegan\", \"vegan\", \"vegas\", \"vegas\", \"vegas\", \"vibe\", \"vibe\", \"vibe\", \"vibe\", \"waffles\", \"wait\", \"wait\", \"wait\", \"wait\", \"waited\", \"waiting\", \"waiting\", \"waitress\", \"waitress\", \"waitress\", \"walked\", \"walked\", \"walked\", \"wanted\", \"wanted\", \"wanted\", \"wanted\", \"wanted\", \"wasn\", \"wasn\", \"wasn\", \"wasn\", \"wasn\", \"water\", \"water\", \"water\", \"water\", \"water\", \"way\", \"way\", \"way\", \"way\", \"way\", \"went\", \"went\", \"went\", \"went\", \"went\", \"wings\", \"wings\", \"wings\", \"woman\", \"woman\", \"wonderful\", \"wonderful\", \"wonderful\", \"wonderful\", \"wonderful\", \"worth\", \"worth\", \"worth\", \"worth\", \"worth\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [4, 2, 5, 1, 3]};\n",
       "\n",
       "function LDAvis_load_lib(url, callback){\n",
       "  var s = document.createElement('script');\n",
       "  s.src = url;\n",
       "  s.async = true;\n",
       "  s.onreadystatechange = s.onload = callback;\n",
       "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
       "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "}\n",
       "\n",
       "if(typeof(LDAvis) !== \"undefined\"){\n",
       "   // already loaded: just create the visualization\n",
       "   !function(LDAvis){\n",
       "       new LDAvis(\"#\" + \"ldavis_el191404808091537846151745842\", ldavis_el191404808091537846151745842_data);\n",
       "   }(LDAvis);\n",
       "}else if(typeof define === \"function\" && define.amd){\n",
       "   // require.js is available: use it to load d3/LDAvis\n",
       "   require.config({paths: {d3: \"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min\"}});\n",
       "   require([\"d3\"], function(d3){\n",
       "      window.d3 = d3;\n",
       "      LDAvis_load_lib(\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js\", function(){\n",
       "        new LDAvis(\"#\" + \"ldavis_el191404808091537846151745842\", ldavis_el191404808091537846151745842_data);\n",
       "      });\n",
       "    });\n",
       "}else{\n",
       "    // require.js not available: dynamically load d3 & LDAvis\n",
       "    LDAvis_load_lib(\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\", function(){\n",
       "         LDAvis_load_lib(\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js\", function(){\n",
       "                 new LDAvis(\"#\" + \"ldavis_el191404808091537846151745842\", ldavis_el191404808091537846151745842_data);\n",
       "            })\n",
       "         });\n",
       "}\n",
       "</script>"
      ],
      "text/plain": [
       "PreparedData(topic_coordinates=              x         y  topics  cluster       Freq\n",
       "topic                                                \n",
       "3      0.111064  0.117458       1        1  22.428112\n",
       "1     -0.105788 -0.114562       2        1  21.037783\n",
       "4     -0.201633  0.045607       3        1  19.484489\n",
       "0      0.138884 -0.161908       4        1  19.298662\n",
       "2      0.057473  0.113405       5        1  17.750957, topic_info=    Category           Freq    Term          Total  loglift  logprob\n",
       "59   Default  141539.000000   tacos  141539.000000  30.0000  30.0000\n",
       "300  Default   57919.000000   great   57919.000000  29.0000  29.0000\n",
       "296  Default   32311.000000    fish   32311.000000  28.0000  28.0000\n",
       "357  Default   72113.000000    taco   72113.000000  27.0000  27.0000\n",
       "82   Default   72163.000000   place   72163.000000  26.0000  26.0000\n",
       "..       ...            ...     ...            ...      ...      ...\n",
       "82    Topic5    3618.810059   place   72163.351562  -1.2641  -5.7568\n",
       "62    Topic5    2781.461914  things    8080.649902   0.6622  -6.0200\n",
       "239   Topic5    2812.380371     way   14059.916016   0.1194  -6.0089\n",
       "542   Topic5    2803.678223     eat   17673.466797  -0.1124  -6.0120\n",
       "680   Topic5    2785.396240   fried    9814.665039   0.4692  -6.0186\n",
       "\n",
       "[444 rows x 6 columns], token_table=      Topic      Freq     Term\n",
       "term                          \n",
       "1875      2  0.999062  adobada\n",
       "9076      2  0.997352  adobado\n",
       "3451      2  0.998749     agua\n",
       "6883      2  0.997593    aguas\n",
       "1066      3  0.999780      ahi\n",
       "...     ...       ...      ...\n",
       "394       1  0.070866    worth\n",
       "394       2  0.622432    worth\n",
       "394       3  0.036970    worth\n",
       "394       4  0.006434    worth\n",
       "394       5  0.263300    worth\n",
       "\n",
       "[1043 rows x 3 columns], R=30, lambda_step=0.01, plot_opts={'xlab': 'PC1', 'ylab': 'PC2'}, topic_order=[4, 2, 5, 1, 3])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''' This is very useful for finding words that arent useful to the overall analysis '''\n",
    "pyLDAvis.enable_notebook()\n",
    "pyLDAvis.gensim.prepare(lda, corpus, id2word)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc38484fa20>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "''' Visualizing the distribution of Ratings '''\n",
    "sns.distplot(reviews_df['stars'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x936 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "''' Visualizing the most used diction in the data  '''\n",
    "\n",
    "def count(docs):\n",
    "\n",
    "        word_counts = Counter()\n",
    "        appears_in = Counter()\n",
    "        \n",
    "        total_docs = len(docs)\n",
    "\n",
    "        for doc in docs:\n",
    "            word_counts.update(doc)\n",
    "            appears_in.update(set(doc))\n",
    "\n",
    "        temp = zip(word_counts.keys(), word_counts.values())\n",
    "        \n",
    "        wc = pd.DataFrame(temp, columns = ['word', 'count'])\n",
    "\n",
    "        wc['rank'] = wc['count'].rank(method='first', ascending=False)\n",
    "        total = wc['count'].sum()\n",
    "\n",
    "        wc['pct_total'] = wc['count'].apply(lambda x: x / total)\n",
    "        \n",
    "        wc = wc.sort_values(by='rank')\n",
    "        wc['cul_pct_total'] = wc['pct_total'].cumsum()\n",
    "\n",
    "        t2 = zip(appears_in.keys(), appears_in.values())\n",
    "        ac = pd.DataFrame(t2, columns=['word', 'appears_in'])\n",
    "        wc = ac.merge(wc, on='word')\n",
    "\n",
    "        wc['appears_in_pct'] = wc['appears_in'].apply(lambda x: x / total_docs)\n",
    "        \n",
    "        return wc.sort_values(by='rank')\n",
    "    \n",
    "    \n",
    "wc = count(reviews_df['tokens'])\n",
    "\n",
    "sns.barplot(x='count', y='word', data = (wc[wc['count'] > 13000]))\n",
    "fig_size = plt.rcParams[\"figure.figsize\"]\n",
    "fig_size[0] = 13\n",
    "fig_size[1] = 13"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rating Classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 2 candidates, totalling 10 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   6 out of  10 | elapsed:   38.5s remaining:   25.7s\n",
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:  1.0min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'clf__n_iter_no_change': 50} 0.644226867642398\n"
     ]
    }
   ],
   "source": [
    "vect = TfidfVectorizer(stop_words='english')\n",
    "scaler = StandardScaler(with_mean=False, with_std=False)\n",
    "sgdc = SGDRegressor(alpha=0.0001, \n",
    "                    average=False, \n",
    "                    early_stopping=False,\n",
    "                    epsilon=0.1,\n",
    "                    eta0=0.01, \n",
    "                    fit_intercept=True, \n",
    "                    l1_ratio=0.15,\n",
    "                    learning_rate='adaptive', \n",
    "                    loss='squared_loss', \n",
    "                    max_iter=1000,\n",
    "                    n_iter_no_change=42, \n",
    "                    penalty='l2', \n",
    "                    power_t=0.25, \n",
    "                    random_state=69,\n",
    "                    shuffle=True, \n",
    "                    tol=0.001, \n",
    "                    validation_fraction=0.1, \n",
    "                    verbose=0,\n",
    "                    warm_start=False)\n",
    "\n",
    "pipe = Pipeline([('vect', vect), \n",
    "                 ('scaler', scaler),\n",
    "                 ('clf', sgdc)])\n",
    "# Fit Pipeline\n",
    "pipe.fit(reviews_df['tokens'].astype(str), reviews_df['stars'])\n",
    "\n",
    "# Declaring some parameters to fine tune\n",
    "parameters = {\n",
    "    #'clf__alpha' : (.0001),\n",
    "    #'clf__max_iter' : (1000),\n",
    "    'clf__n_iter_no_change' : (45, 50),\n",
    "    #'clf__learning_rate' : ('constant', 'optimal', 'invscaling', 'adaptive'),\n",
    "    #'clf__tol' : (.001, .002, .01, .1),\n",
    "    #'clf__loss' : ('squared_loss', 'huber', 'epsilon_insensitive', 'squared_epsilon_insensitive'),\n",
    "    #'clf__penalty' : ('none', 'l2', 'l1', 'elasticnet')\n",
    "    \n",
    "\n",
    "}\n",
    "\n",
    "# Instantiating grid Search\n",
    "grid_search = GridSearchCV(pipe,parameters, cv=5, n_jobs=-1, verbose=1)\n",
    "\n",
    "# Fitting to find the.... best fits\n",
    "grid_search.fit(reviews_df['tokens'].astype(str), reviews_df['stars'])\n",
    "\n",
    "# Printing out the best params along with the best accuracy score via grid search\n",
    "print(grid_search.best_params_, grid_search.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = grid_search.predict(tacos_df['tokens'].astype(str))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.799389986360605\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'I liked the food here, not a busy place. I ordered a beef burrito, 2 pulled pork hard tacos and a chicken quesadilla. I had ordered the beef in the past and wanted to try something different - preferred the beef to the chicken for sure. The tacos were surprisingly good - I was used to eating tacos at a mexican place in downtown Portchester NY - this reminded me of those days. The pork was very nice and tender. The burrito on the other hand had too much filling - I could not finish all of it. Will be going back.'"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''' Sampling to be sure it worked '''\n",
    "print(y_pred[420])\n",
    "tacos_df['text'].iloc[420]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "tacos_df['modified_rating'] = y_pred\n",
    "spare = tacos_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "tacos_df = spare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(121979, 8)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>business_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>text</th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>tokens</th>\n",
       "      <th>modified_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>88</td>\n",
       "      <td>i1XAHltBpZC5zP5skcwVGw</td>\n",
       "      <td>VR6GpWIda3SfvPC-lg9H3w</td>\n",
       "      <td>4</td>\n",
       "      <td>A local friend introduced me to this jewel res...</td>\n",
       "      <td>\"Tuck Shop\"</td>\n",
       "      <td>4.5</td>\n",
       "      <td>[local, friend, introduced, jewel, restaurant,...</td>\n",
       "      <td>4.523351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>94</td>\n",
       "      <td>kzXh1wIcCekofvPH5PGBgw</td>\n",
       "      <td>VR6GpWIda3SfvPC-lg9H3w</td>\n",
       "      <td>4</td>\n",
       "      <td>I've been coming here for a couple of years no...</td>\n",
       "      <td>\"Tuck Shop\"</td>\n",
       "      <td>4.5</td>\n",
       "      <td>[coming, couple, years, disappointed, service,...</td>\n",
       "      <td>4.435206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>102</td>\n",
       "      <td>zzgb9L3NBT9V8BGw_DcVYw</td>\n",
       "      <td>VR6GpWIda3SfvPC-lg9H3w</td>\n",
       "      <td>5</td>\n",
       "      <td>Getting an RSVP at one of Montreal's best rest...</td>\n",
       "      <td>\"Tuck Shop\"</td>\n",
       "      <td>4.5</td>\n",
       "      <td>[getting, rsvp, montreal, best, restaurants, d...</td>\n",
       "      <td>4.739487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>108</td>\n",
       "      <td>D8nma4ZaqHmSc8uLDbyBdw</td>\n",
       "      <td>VR6GpWIda3SfvPC-lg9H3w</td>\n",
       "      <td>5</td>\n",
       "      <td>Our first time at Tuck Shop, what a place what...</td>\n",
       "      <td>\"Tuck Shop\"</td>\n",
       "      <td>4.5</td>\n",
       "      <td>[time, tuck, shop, place, service, zucchini, b...</td>\n",
       "      <td>4.607139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>127</td>\n",
       "      <td>93vyTaJgzQRQO4Zs9Cg_pw</td>\n",
       "      <td>VR6GpWIda3SfvPC-lg9H3w</td>\n",
       "      <td>5</td>\n",
       "      <td>I'm not sure if you use the word tuck-shop in ...</td>\n",
       "      <td>\"Tuck Shop\"</td>\n",
       "      <td>4.5</td>\n",
       "      <td>[sure, use, word, tuck, shop, canada, means, r...</td>\n",
       "      <td>4.112799</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    user_id             business_id  stars  \\\n",
       "88   i1XAHltBpZC5zP5skcwVGw  VR6GpWIda3SfvPC-lg9H3w      4   \n",
       "94   kzXh1wIcCekofvPH5PGBgw  VR6GpWIda3SfvPC-lg9H3w      4   \n",
       "102  zzgb9L3NBT9V8BGw_DcVYw  VR6GpWIda3SfvPC-lg9H3w      5   \n",
       "108  D8nma4ZaqHmSc8uLDbyBdw  VR6GpWIda3SfvPC-lg9H3w      5   \n",
       "127  93vyTaJgzQRQO4Zs9Cg_pw  VR6GpWIda3SfvPC-lg9H3w      5   \n",
       "\n",
       "                                                  text         name  rating  \\\n",
       "88   A local friend introduced me to this jewel res...  \"Tuck Shop\"     4.5   \n",
       "94   I've been coming here for a couple of years no...  \"Tuck Shop\"     4.5   \n",
       "102  Getting an RSVP at one of Montreal's best rest...  \"Tuck Shop\"     4.5   \n",
       "108  Our first time at Tuck Shop, what a place what...  \"Tuck Shop\"     4.5   \n",
       "127  I'm not sure if you use the word tuck-shop in ...  \"Tuck Shop\"     4.5   \n",
       "\n",
       "                                                tokens  modified_rating  \n",
       "88   [local, friend, introduced, jewel, restaurant,...         4.523351  \n",
       "94   [coming, couple, years, disappointed, service,...         4.435206  \n",
       "102  [getting, rsvp, montreal, best, restaurants, d...         4.739487  \n",
       "108  [time, tuck, shop, place, service, zucchini, b...         4.607139  \n",
       "127  [sure, use, word, tuck, shop, canada, means, r...         4.112799  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(tacos_df.shape)\n",
    "tacos_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' Renaming the columns to prepare for export '''\n",
    "tacos_df = tacos_df.rename(columns = {'text' : 'original_text_review', \n",
    "                                      'stars' : 'original_yelp_user_rating', \n",
    "                                      'rating' : 'yelp_store_rating',\n",
    "                                      'name' : 'business_name',\n",
    "                                      'modified_rating': 'adjusted_sentiment_rating',\n",
    "                                      'tokens' : 'tokenized_review'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' Reordering Columns to more succinct format '''\n",
    "tacos_df = tacos_df[['business_id', 'business_name', 'yelp_store_rating', \n",
    "                     'user_id', 'original_yelp_user_rating', \n",
    "                     'adjusted_sentiment_rating', 'original_text_review', \n",
    "                     'tokenized_review']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' Removing outliers Greater than 5 '''\n",
    "mask = (tacos_df['adjusted_sentiment_rating'] < 5)\n",
    "tacos_df = tacos_df[mask]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' Removing the outliers Less than 0 '''\n",
    "mask = (tacos_df['adjusted_sentiment_rating'] > 0)\n",
    "tacos_df = tacos_df[mask]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(114253, 8)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tacos_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>business_name</th>\n",
       "      <th>yelp_store_rating</th>\n",
       "      <th>user_id</th>\n",
       "      <th>original_yelp_user_rating</th>\n",
       "      <th>adjusted_sentiment_rating</th>\n",
       "      <th>original_text_review</th>\n",
       "      <th>tokenized_review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>88</td>\n",
       "      <td>VR6GpWIda3SfvPC-lg9H3w</td>\n",
       "      <td>\"Tuck Shop\"</td>\n",
       "      <td>4.5</td>\n",
       "      <td>i1XAHltBpZC5zP5skcwVGw</td>\n",
       "      <td>4</td>\n",
       "      <td>4.523351</td>\n",
       "      <td>A local friend introduced me to this jewel res...</td>\n",
       "      <td>[local, friend, introduced, jewel, restaurant,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>94</td>\n",
       "      <td>VR6GpWIda3SfvPC-lg9H3w</td>\n",
       "      <td>\"Tuck Shop\"</td>\n",
       "      <td>4.5</td>\n",
       "      <td>kzXh1wIcCekofvPH5PGBgw</td>\n",
       "      <td>4</td>\n",
       "      <td>4.435206</td>\n",
       "      <td>I've been coming here for a couple of years no...</td>\n",
       "      <td>[coming, couple, years, disappointed, service,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>102</td>\n",
       "      <td>VR6GpWIda3SfvPC-lg9H3w</td>\n",
       "      <td>\"Tuck Shop\"</td>\n",
       "      <td>4.5</td>\n",
       "      <td>zzgb9L3NBT9V8BGw_DcVYw</td>\n",
       "      <td>5</td>\n",
       "      <td>4.739487</td>\n",
       "      <td>Getting an RSVP at one of Montreal's best rest...</td>\n",
       "      <td>[getting, rsvp, montreal, best, restaurants, d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>108</td>\n",
       "      <td>VR6GpWIda3SfvPC-lg9H3w</td>\n",
       "      <td>\"Tuck Shop\"</td>\n",
       "      <td>4.5</td>\n",
       "      <td>D8nma4ZaqHmSc8uLDbyBdw</td>\n",
       "      <td>5</td>\n",
       "      <td>4.607139</td>\n",
       "      <td>Our first time at Tuck Shop, what a place what...</td>\n",
       "      <td>[time, tuck, shop, place, service, zucchini, b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>127</td>\n",
       "      <td>VR6GpWIda3SfvPC-lg9H3w</td>\n",
       "      <td>\"Tuck Shop\"</td>\n",
       "      <td>4.5</td>\n",
       "      <td>93vyTaJgzQRQO4Zs9Cg_pw</td>\n",
       "      <td>5</td>\n",
       "      <td>4.112799</td>\n",
       "      <td>I'm not sure if you use the word tuck-shop in ...</td>\n",
       "      <td>[sure, use, word, tuck, shop, canada, means, r...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                business_id business_name  yelp_store_rating  \\\n",
       "88   VR6GpWIda3SfvPC-lg9H3w   \"Tuck Shop\"                4.5   \n",
       "94   VR6GpWIda3SfvPC-lg9H3w   \"Tuck Shop\"                4.5   \n",
       "102  VR6GpWIda3SfvPC-lg9H3w   \"Tuck Shop\"                4.5   \n",
       "108  VR6GpWIda3SfvPC-lg9H3w   \"Tuck Shop\"                4.5   \n",
       "127  VR6GpWIda3SfvPC-lg9H3w   \"Tuck Shop\"                4.5   \n",
       "\n",
       "                    user_id  original_yelp_user_rating  \\\n",
       "88   i1XAHltBpZC5zP5skcwVGw                          4   \n",
       "94   kzXh1wIcCekofvPH5PGBgw                          4   \n",
       "102  zzgb9L3NBT9V8BGw_DcVYw                          5   \n",
       "108  D8nma4ZaqHmSc8uLDbyBdw                          5   \n",
       "127  93vyTaJgzQRQO4Zs9Cg_pw                          5   \n",
       "\n",
       "     adjusted_sentiment_rating  \\\n",
       "88                    4.523351   \n",
       "94                    4.435206   \n",
       "102                   4.739487   \n",
       "108                   4.607139   \n",
       "127                   4.112799   \n",
       "\n",
       "                                  original_text_review  \\\n",
       "88   A local friend introduced me to this jewel res...   \n",
       "94   I've been coming here for a couple of years no...   \n",
       "102  Getting an RSVP at one of Montreal's best rest...   \n",
       "108  Our first time at Tuck Shop, what a place what...   \n",
       "127  I'm not sure if you use the word tuck-shop in ...   \n",
       "\n",
       "                                      tokenized_review  \n",
       "88   [local, friend, introduced, jewel, restaurant,...  \n",
       "94   [coming, couple, years, disappointed, service,...  \n",
       "102  [getting, rsvp, montreal, best, restaurants, d...  \n",
       "108  [time, tuck, shop, place, service, zucchini, b...  \n",
       "127  [sure, use, word, tuck, shop, canada, means, r...  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tacos_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' Getting the adjusted store reviews '''\n",
    "a = tacos_df.groupby('business_id')['adjusted_sentiment_rating'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = pd.DataFrame(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10563, 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>adjusted_store_rating</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>business_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>--FBCX-N37CMYDfs790Bnw</td>\n",
       "      <td>4.535591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>--GM_ORV2cYS-h38DSaCLw</td>\n",
       "      <td>3.899200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>--cZ6Hhc9F7VkKXxHMVZSQ</td>\n",
       "      <td>4.414962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-01XupAWZEXbdNbxNg5mEg</td>\n",
       "      <td>3.537123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-092wE7j5HZOogMLAh40zA</td>\n",
       "      <td>3.163127</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        adjusted_store_rating\n",
       "business_id                                  \n",
       "--FBCX-N37CMYDfs790Bnw               4.535591\n",
       "--GM_ORV2cYS-h38DSaCLw               3.899200\n",
       "--cZ6Hhc9F7VkKXxHMVZSQ               4.414962\n",
       "-01XupAWZEXbdNbxNg5mEg               3.537123\n",
       "-092wE7j5HZOogMLAh40zA               3.163127"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b = b.rename(columns = {'adjusted_sentiment_rating' : 'adjusted_store_rating'}) \n",
    "print(b.shape)\n",
    "b.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' Merging the new dataframe on '''\n",
    "c = pd.merge(b, tacos_df, how='outer', left_index=True, right_on='business_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>adjusted_store_rating</th>\n",
       "      <th>business_id</th>\n",
       "      <th>business_name</th>\n",
       "      <th>yelp_store_rating</th>\n",
       "      <th>user_id</th>\n",
       "      <th>original_yelp_user_rating</th>\n",
       "      <th>adjusted_sentiment_rating</th>\n",
       "      <th>original_text_review</th>\n",
       "      <th>tokenized_review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3784439</td>\n",
       "      <td>4.535591</td>\n",
       "      <td>--FBCX-N37CMYDfs790Bnw</td>\n",
       "      <td>\"The Bar At Bermuda &amp; St. Rose\"</td>\n",
       "      <td>3.5</td>\n",
       "      <td>-FcEjpQyBbE7b0BU19lErQ</td>\n",
       "      <td>5</td>\n",
       "      <td>4.535591</td>\n",
       "      <td>We've been coming here for years. The staff is...</td>\n",
       "      <td>[coming, years, staff, great, recently, added,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4737409</td>\n",
       "      <td>3.899200</td>\n",
       "      <td>--GM_ORV2cYS-h38DSaCLw</td>\n",
       "      <td>\"Mm Mm Pizza\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>ZjHDoLXzLcj023N1a7WTww</td>\n",
       "      <td>4</td>\n",
       "      <td>3.899200</td>\n",
       "      <td>Ordered several pizzas for a work party..chees...</td>\n",
       "      <td>[ordered, pizzas, work, party, cheeseburger, b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>907246</td>\n",
       "      <td>4.414962</td>\n",
       "      <td>--cZ6Hhc9F7VkKXxHMVZSQ</td>\n",
       "      <td>\"Pio Pio\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>haEqV41MSa3d4KFuMia76w</td>\n",
       "      <td>4</td>\n",
       "      <td>3.956057</td>\n",
       "      <td>I was busy cooking dinner when my friend calle...</td>\n",
       "      <td>[busy, cooking, dinner, friend, called, said, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>907424</td>\n",
       "      <td>4.414962</td>\n",
       "      <td>--cZ6Hhc9F7VkKXxHMVZSQ</td>\n",
       "      <td>\"Pio Pio\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>MvblGTq2F6CiWd83mccnPA</td>\n",
       "      <td>4</td>\n",
       "      <td>4.873866</td>\n",
       "      <td>Great food. Chicken, rice and beans, tacos, pl...</td>\n",
       "      <td>[great, food, chicken, rice, beans, tacos, pla...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1938376</td>\n",
       "      <td>3.537123</td>\n",
       "      <td>-01XupAWZEXbdNbxNg5mEg</td>\n",
       "      <td>\"18 Degrees Neighborhood Grill\"</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-CVmjsibfqwcOdNRQtaRLA</td>\n",
       "      <td>3</td>\n",
       "      <td>3.537123</td>\n",
       "      <td>Went here last week with the husband for dinne...</td>\n",
       "      <td>[went, week, husband, dinner, coupon, saw, fri...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1796425</td>\n",
       "      <td>3.733265</td>\n",
       "      <td>zzwicjPC9g246MK2M1ZFBA</td>\n",
       "      <td>\"Sizzler\"</td>\n",
       "      <td>3.0</td>\n",
       "      <td>w0B7U_-vU2y7O2rpzR2nbA</td>\n",
       "      <td>3</td>\n",
       "      <td>4.097813</td>\n",
       "      <td>CHEESE TOAST *drops mic, walks away*\\n\\nI grew...</td>\n",
       "      <td>[cheese, toast, drops, mic, walks, away, grew,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1796426</td>\n",
       "      <td>3.733265</td>\n",
       "      <td>zzwicjPC9g246MK2M1ZFBA</td>\n",
       "      <td>\"Sizzler\"</td>\n",
       "      <td>3.0</td>\n",
       "      <td>DK57YibC5ShBmqQl97CKog</td>\n",
       "      <td>3</td>\n",
       "      <td>2.801825</td>\n",
       "      <td>Wow, what a blast from the past!  I hadn't eat...</td>\n",
       "      <td>[wow, blast, past, hadn, eaten, sizzler, popul...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1796427</td>\n",
       "      <td>3.733265</td>\n",
       "      <td>zzwicjPC9g246MK2M1ZFBA</td>\n",
       "      <td>\"Sizzler\"</td>\n",
       "      <td>3.0</td>\n",
       "      <td>xnN53sx27hyIYmSzUwCwHg</td>\n",
       "      <td>4</td>\n",
       "      <td>4.399360</td>\n",
       "      <td>Great alternative to the now defunct Sweet Tom...</td>\n",
       "      <td>[great, alternative, defunct, sweet, tomatoes,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1796428</td>\n",
       "      <td>3.733265</td>\n",
       "      <td>zzwicjPC9g246MK2M1ZFBA</td>\n",
       "      <td>\"Sizzler\"</td>\n",
       "      <td>3.0</td>\n",
       "      <td>YTtaAnHMsXozVB29qr3sbA</td>\n",
       "      <td>3</td>\n",
       "      <td>3.429378</td>\n",
       "      <td>I haven't been to a Sizzler in a long time. Th...</td>\n",
       "      <td>[haven, sizzler, long, time, review, salad, ba...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1796433</td>\n",
       "      <td>3.733265</td>\n",
       "      <td>zzwicjPC9g246MK2M1ZFBA</td>\n",
       "      <td>\"Sizzler\"</td>\n",
       "      <td>3.0</td>\n",
       "      <td>F8qKwFsbt-BwhRZHmsXwbg</td>\n",
       "      <td>4</td>\n",
       "      <td>3.891592</td>\n",
       "      <td>Got a tri-tip steak and unlimited salad bar. T...</td>\n",
       "      <td>[got, tri, tip, steak, unlimited, salad, bar, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>114253 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         adjusted_store_rating             business_id  \\\n",
       "3784439               4.535591  --FBCX-N37CMYDfs790Bnw   \n",
       "4737409               3.899200  --GM_ORV2cYS-h38DSaCLw   \n",
       "907246                4.414962  --cZ6Hhc9F7VkKXxHMVZSQ   \n",
       "907424                4.414962  --cZ6Hhc9F7VkKXxHMVZSQ   \n",
       "1938376               3.537123  -01XupAWZEXbdNbxNg5mEg   \n",
       "...                        ...                     ...   \n",
       "1796425               3.733265  zzwicjPC9g246MK2M1ZFBA   \n",
       "1796426               3.733265  zzwicjPC9g246MK2M1ZFBA   \n",
       "1796427               3.733265  zzwicjPC9g246MK2M1ZFBA   \n",
       "1796428               3.733265  zzwicjPC9g246MK2M1ZFBA   \n",
       "1796433               3.733265  zzwicjPC9g246MK2M1ZFBA   \n",
       "\n",
       "                           business_name  yelp_store_rating  \\\n",
       "3784439  \"The Bar At Bermuda & St. Rose\"                3.5   \n",
       "4737409                    \"Mm Mm Pizza\"                4.0   \n",
       "907246                         \"Pio Pio\"                4.0   \n",
       "907424                         \"Pio Pio\"                4.0   \n",
       "1938376  \"18 Degrees Neighborhood Grill\"                3.0   \n",
       "...                                  ...                ...   \n",
       "1796425                        \"Sizzler\"                3.0   \n",
       "1796426                        \"Sizzler\"                3.0   \n",
       "1796427                        \"Sizzler\"                3.0   \n",
       "1796428                        \"Sizzler\"                3.0   \n",
       "1796433                        \"Sizzler\"                3.0   \n",
       "\n",
       "                        user_id  original_yelp_user_rating  \\\n",
       "3784439  -FcEjpQyBbE7b0BU19lErQ                          5   \n",
       "4737409  ZjHDoLXzLcj023N1a7WTww                          4   \n",
       "907246   haEqV41MSa3d4KFuMia76w                          4   \n",
       "907424   MvblGTq2F6CiWd83mccnPA                          4   \n",
       "1938376  -CVmjsibfqwcOdNRQtaRLA                          3   \n",
       "...                         ...                        ...   \n",
       "1796425  w0B7U_-vU2y7O2rpzR2nbA                          3   \n",
       "1796426  DK57YibC5ShBmqQl97CKog                          3   \n",
       "1796427  xnN53sx27hyIYmSzUwCwHg                          4   \n",
       "1796428  YTtaAnHMsXozVB29qr3sbA                          3   \n",
       "1796433  F8qKwFsbt-BwhRZHmsXwbg                          4   \n",
       "\n",
       "         adjusted_sentiment_rating  \\\n",
       "3784439                   4.535591   \n",
       "4737409                   3.899200   \n",
       "907246                    3.956057   \n",
       "907424                    4.873866   \n",
       "1938376                   3.537123   \n",
       "...                            ...   \n",
       "1796425                   4.097813   \n",
       "1796426                   2.801825   \n",
       "1796427                   4.399360   \n",
       "1796428                   3.429378   \n",
       "1796433                   3.891592   \n",
       "\n",
       "                                      original_text_review  \\\n",
       "3784439  We've been coming here for years. The staff is...   \n",
       "4737409  Ordered several pizzas for a work party..chees...   \n",
       "907246   I was busy cooking dinner when my friend calle...   \n",
       "907424   Great food. Chicken, rice and beans, tacos, pl...   \n",
       "1938376  Went here last week with the husband for dinne...   \n",
       "...                                                    ...   \n",
       "1796425  CHEESE TOAST *drops mic, walks away*\\n\\nI grew...   \n",
       "1796426  Wow, what a blast from the past!  I hadn't eat...   \n",
       "1796427  Great alternative to the now defunct Sweet Tom...   \n",
       "1796428  I haven't been to a Sizzler in a long time. Th...   \n",
       "1796433  Got a tri-tip steak and unlimited salad bar. T...   \n",
       "\n",
       "                                          tokenized_review  \n",
       "3784439  [coming, years, staff, great, recently, added,...  \n",
       "4737409  [ordered, pizzas, work, party, cheeseburger, b...  \n",
       "907246   [busy, cooking, dinner, friend, called, said, ...  \n",
       "907424   [great, food, chicken, rice, beans, tacos, pla...  \n",
       "1938376  [went, week, husband, dinner, coupon, saw, fri...  \n",
       "...                                                    ...  \n",
       "1796425  [cheese, toast, drops, mic, walks, away, grew,...  \n",
       "1796426  [wow, blast, past, hadn, eaten, sizzler, popul...  \n",
       "1796427  [great, alternative, defunct, sweet, tomatoes,...  \n",
       "1796428  [haven, sizzler, long, time, review, salad, ba...  \n",
       "1796433  [got, tri, tip, steak, unlimited, salad, bar, ...  \n",
       "\n",
       "[114253 rows x 9 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "tacos_df = c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "''' Reordering Columns to more succinct format '''\n",
    "tacos_df = tacos_df[['business_id', 'business_name', 'yelp_store_rating', \n",
    "                     'adjusted_store_rating', \n",
    "                     'user_id', 'original_yelp_user_rating', \n",
    "                     'adjusted_sentiment_rating', 'original_text_review', \n",
    "                     'tokenized_review']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>business_name</th>\n",
       "      <th>yelp_store_rating</th>\n",
       "      <th>adjusted_store_rating</th>\n",
       "      <th>user_id</th>\n",
       "      <th>original_yelp_user_rating</th>\n",
       "      <th>adjusted_sentiment_rating</th>\n",
       "      <th>original_text_review</th>\n",
       "      <th>tokenized_review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3784439</td>\n",
       "      <td>--FBCX-N37CMYDfs790Bnw</td>\n",
       "      <td>\"The Bar At Bermuda &amp; St. Rose\"</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.535591</td>\n",
       "      <td>-FcEjpQyBbE7b0BU19lErQ</td>\n",
       "      <td>5</td>\n",
       "      <td>4.535591</td>\n",
       "      <td>We've been coming here for years. The staff is...</td>\n",
       "      <td>[coming, years, staff, great, recently, added,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4737409</td>\n",
       "      <td>--GM_ORV2cYS-h38DSaCLw</td>\n",
       "      <td>\"Mm Mm Pizza\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.899200</td>\n",
       "      <td>ZjHDoLXzLcj023N1a7WTww</td>\n",
       "      <td>4</td>\n",
       "      <td>3.899200</td>\n",
       "      <td>Ordered several pizzas for a work party..chees...</td>\n",
       "      <td>[ordered, pizzas, work, party, cheeseburger, b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>907246</td>\n",
       "      <td>--cZ6Hhc9F7VkKXxHMVZSQ</td>\n",
       "      <td>\"Pio Pio\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.414962</td>\n",
       "      <td>haEqV41MSa3d4KFuMia76w</td>\n",
       "      <td>4</td>\n",
       "      <td>3.956057</td>\n",
       "      <td>I was busy cooking dinner when my friend calle...</td>\n",
       "      <td>[busy, cooking, dinner, friend, called, said, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>907424</td>\n",
       "      <td>--cZ6Hhc9F7VkKXxHMVZSQ</td>\n",
       "      <td>\"Pio Pio\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.414962</td>\n",
       "      <td>MvblGTq2F6CiWd83mccnPA</td>\n",
       "      <td>4</td>\n",
       "      <td>4.873866</td>\n",
       "      <td>Great food. Chicken, rice and beans, tacos, pl...</td>\n",
       "      <td>[great, food, chicken, rice, beans, tacos, pla...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1938376</td>\n",
       "      <td>-01XupAWZEXbdNbxNg5mEg</td>\n",
       "      <td>\"18 Degrees Neighborhood Grill\"</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.537123</td>\n",
       "      <td>-CVmjsibfqwcOdNRQtaRLA</td>\n",
       "      <td>3</td>\n",
       "      <td>3.537123</td>\n",
       "      <td>Went here last week with the husband for dinne...</td>\n",
       "      <td>[went, week, husband, dinner, coupon, saw, fri...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3830183</td>\n",
       "      <td>-092wE7j5HZOogMLAh40zA</td>\n",
       "      <td>\"Wong's Jr\"</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.163127</td>\n",
       "      <td>IC7NLIeWhS45_aEE_8aVUg</td>\n",
       "      <td>4</td>\n",
       "      <td>3.163127</td>\n",
       "      <td>This place is my favorite Chinese food place w...</td>\n",
       "      <td>[place, favorite, chinese, food, place, miles,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3889700</td>\n",
       "      <td>-0t6o9LXMVQ3aV8CHhRTnA</td>\n",
       "      <td>\"AZ International Marketplace\"</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.497676</td>\n",
       "      <td>oUst55rUuv2nKEQ0FgJ5GQ</td>\n",
       "      <td>4</td>\n",
       "      <td>4.497676</td>\n",
       "      <td>Wow ... what a huge market indeed. This is the...</td>\n",
       "      <td>[wow, huge, market, sister, store, smaller, me...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1668176</td>\n",
       "      <td>-0tgMGl7D9B10YjSN2ujLA</td>\n",
       "      <td>\"Dubliner\"</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.221543</td>\n",
       "      <td>tfBnJCPMpI989z6N5vPPug</td>\n",
       "      <td>5</td>\n",
       "      <td>4.221543</td>\n",
       "      <td>Shepards pie and taco Tuesday are definitely j...</td>\n",
       "      <td>[shepards, pie, taco, tuesday, definitely, cou...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496748</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>SUMR4k6sqSFFrBpMKq0HWg</td>\n",
       "      <td>3</td>\n",
       "      <td>3.971430</td>\n",
       "      <td>The food is great, shrimp cocktails have an au...</td>\n",
       "      <td>[food, great, shrimp, cocktails, authentic, fl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496757</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>vRhszJeS0GMLvMDT8eC3OQ</td>\n",
       "      <td>4</td>\n",
       "      <td>3.690165</td>\n",
       "      <td>We took a break from the Christmas shopping cr...</td>\n",
       "      <td>[took, break, christmas, shopping, craziness, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496811</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>nbUVwIWxtheGlDLdM8AEjA</td>\n",
       "      <td>5</td>\n",
       "      <td>3.988934</td>\n",
       "      <td>On our way to Sedona and used yelp to determin...</td>\n",
       "      <td>[way, sedona, yelp, determine, stop, easy, loc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496813</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>JxQOKTyANMTOlVtfmiqXsQ</td>\n",
       "      <td>5</td>\n",
       "      <td>4.893775</td>\n",
       "      <td>We had the Mahi Mahi fish tacos.  They were am...</td>\n",
       "      <td>[mahi, mahi, fish, tacos, amazing, loved, sals...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496828</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>j0Un8DiHkzhf5oaOj99RzQ</td>\n",
       "      <td>4</td>\n",
       "      <td>3.608050</td>\n",
       "      <td>I ordered the Chili Relleno combination platte...</td>\n",
       "      <td>[ordered, chili, relleno, combination, platter...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496839</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>YwTA18gfITTzJ1EvfMzAmg</td>\n",
       "      <td>5</td>\n",
       "      <td>4.178485</td>\n",
       "      <td>We have eaten here once, and the experience wa...</td>\n",
       "      <td>[eaten, experience, great, definitely, hidden,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496857</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>UmXzwFM2OkZHWJ5cJZlqkg</td>\n",
       "      <td>3</td>\n",
       "      <td>3.889293</td>\n",
       "      <td>While I don't think there is a river or a mira...</td>\n",
       "      <td>[think, river, mirage, near, place, large, pud...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496874</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>13F6gDJ40Ylm6ZBqaDjBYA</td>\n",
       "      <td>4</td>\n",
       "      <td>4.430749</td>\n",
       "      <td>Came here with my boyfriend, we have been look...</td>\n",
       "      <td>[came, boyfriend, looking, good, mexican, rest...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496877</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>nT6f_etGqvkoneKKxDnpIg</td>\n",
       "      <td>3</td>\n",
       "      <td>3.321037</td>\n",
       "      <td>We went here for dinner June 2nd to celebrate ...</td>\n",
       "      <td>[went, dinner, june, celebrate, friend, birthd...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496878</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>mhArWI_0mvu3S4FiQcZ0nw</td>\n",
       "      <td>2</td>\n",
       "      <td>1.802178</td>\n",
       "      <td>Not what it used to be.  This was the third ti...</td>\n",
       "      <td>[time, season, ate, sure, returned, encountere...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496879</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>_iMA7tOMdrHBDvzbWr-k4g</td>\n",
       "      <td>5</td>\n",
       "      <td>4.073761</td>\n",
       "      <td>Ok, Midwest guys, best ever Mexican.  Why?  Au...</td>\n",
       "      <td>[midwest, guys, best, mexican, authentic, loca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496886</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>MGpRmnbDX07EW_aQXn2TYg</td>\n",
       "      <td>5</td>\n",
       "      <td>4.619903</td>\n",
       "      <td>Awesome.  Since I moved to AZ. from TX. I have...</td>\n",
       "      <td>[awesome, moved, searching, good, mexican, foo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496888</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>GQuQ_x_ZUnQjjTDfOFQmUA</td>\n",
       "      <td>4</td>\n",
       "      <td>3.545183</td>\n",
       "      <td>Went in this past Sunday about 10:30. We were ...</td>\n",
       "      <td>[went, past, sunday, seated, promptly, friendl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496895</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>DWz6gCALJMU-LiJPo8x7ng</td>\n",
       "      <td>4</td>\n",
       "      <td>3.965803</td>\n",
       "      <td>We went at the height of the dinner rush on Fr...</td>\n",
       "      <td>[went, height, dinner, rush, friday, wanted, d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2496900</td>\n",
       "      <td>-1VaIJza42Hjev6ukacCNg</td>\n",
       "      <td>\"Rio Mirage Cafe Y Cantina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.841703</td>\n",
       "      <td>eAJ3Ip0vh-zuk_BmcmchYA</td>\n",
       "      <td>3</td>\n",
       "      <td>3.646792</td>\n",
       "      <td>This place is a good lunch break spot if you a...</td>\n",
       "      <td>[place, good, lunch, break, spot, lunch, break...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4446722</td>\n",
       "      <td>-1mjIwXWiI1uzy-8nGkdkw</td>\n",
       "      <td>\"Bridal Fashion Debut\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.928270</td>\n",
       "      <td>nf7dY3evihisaWf1xgKKwQ</td>\n",
       "      <td>4</td>\n",
       "      <td>3.928270</td>\n",
       "      <td>hmm, hopefully I am reviewing the right thing....</td>\n",
       "      <td>[hmm, hopefully, reviewing, right, thing, sure...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4875759</td>\n",
       "      <td>-1uVyyy3UXNA9WoPucNniA</td>\n",
       "      <td>\"La Tapatia Market\"</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.545881</td>\n",
       "      <td>wsXtgONpRltBnNxCI8KpTQ</td>\n",
       "      <td>5</td>\n",
       "      <td>4.338726</td>\n",
       "      <td>My dad took me in for lunch. He was there 2 we...</td>\n",
       "      <td>[dad, took, lunch, weeks, ago, couldn, stop, t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4875761</td>\n",
       "      <td>-1uVyyy3UXNA9WoPucNniA</td>\n",
       "      <td>\"La Tapatia Market\"</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.545881</td>\n",
       "      <td>lXlEUF5EA4PDjtLhT2Iu8w</td>\n",
       "      <td>5</td>\n",
       "      <td>4.319883</td>\n",
       "      <td>I tried the carne asada tacos and the carnitas...</td>\n",
       "      <td>[tried, carne, asada, tacos, carnitas, tacos, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4875773</td>\n",
       "      <td>-1uVyyy3UXNA9WoPucNniA</td>\n",
       "      <td>\"La Tapatia Market\"</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.545881</td>\n",
       "      <td>IXHU--FVkanfIWP82aBCBA</td>\n",
       "      <td>5</td>\n",
       "      <td>4.979033</td>\n",
       "      <td>Went in and got a taco combo and some other st...</td>\n",
       "      <td>[went, got, taco, combo, stuff, amazing, fresh...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4245032</td>\n",
       "      <td>-1xCh7Cocn6IwFzhELyohA</td>\n",
       "      <td>\"Jose' and Tony's Mexican Restaurant\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.893258</td>\n",
       "      <td>Bf3hX9Y3W00T2d0nSB_Crg</td>\n",
       "      <td>1</td>\n",
       "      <td>2.344371</td>\n",
       "      <td>This is a tale of two teachers, a married coup...</td>\n",
       "      <td>[tale, teachers, married, couple, looking, che...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4245033</td>\n",
       "      <td>-1xCh7Cocn6IwFzhELyohA</td>\n",
       "      <td>\"Jose' and Tony's Mexican Restaurant\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.893258</td>\n",
       "      <td>nbVhicAu_-rOrXKh7xV2dA</td>\n",
       "      <td>2</td>\n",
       "      <td>2.994006</td>\n",
       "      <td>I have been here a number of times, mostly bec...</td>\n",
       "      <td>[number, times, convenient, near, friends, add...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4245038</td>\n",
       "      <td>-1xCh7Cocn6IwFzhELyohA</td>\n",
       "      <td>\"Jose' and Tony's Mexican Restaurant\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.893258</td>\n",
       "      <td>WoKCLSctS7G2547xKcED-Q</td>\n",
       "      <td>3</td>\n",
       "      <td>3.551554</td>\n",
       "      <td>It hurts my heart a little to see all the one ...</td>\n",
       "      <td>[hurts, heart, little, star, reviews, jose, to...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4245049</td>\n",
       "      <td>-1xCh7Cocn6IwFzhELyohA</td>\n",
       "      <td>\"Jose' and Tony's Mexican Restaurant\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.893258</td>\n",
       "      <td>7LMYtJ7xjMEpmGHJzQGFjg</td>\n",
       "      <td>2</td>\n",
       "      <td>1.814393</td>\n",
       "      <td>So this place. Have been driving by it for 6 m...</td>\n",
       "      <td>[place, driving, months, finally, inside, plac...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4245053</td>\n",
       "      <td>-1xCh7Cocn6IwFzhELyohA</td>\n",
       "      <td>\"Jose' and Tony's Mexican Restaurant\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.893258</td>\n",
       "      <td>YopTJyzIiL6-3piLryzFrg</td>\n",
       "      <td>4</td>\n",
       "      <td>3.927350</td>\n",
       "      <td>I remember the day, years ago, when I would ex...</td>\n",
       "      <td>[remember, day, years, ago, excitedly, run, st...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4245056</td>\n",
       "      <td>-1xCh7Cocn6IwFzhELyohA</td>\n",
       "      <td>\"Jose' and Tony's Mexican Restaurant\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.893258</td>\n",
       "      <td>rCWrxuRC8_pfagpchtHp6A</td>\n",
       "      <td>2</td>\n",
       "      <td>2.980823</td>\n",
       "      <td>In business for longer than I have been on thi...</td>\n",
       "      <td>[business, longer, earthly, plane, jose, tony,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4245058</td>\n",
       "      <td>-1xCh7Cocn6IwFzhELyohA</td>\n",
       "      <td>\"Jose' and Tony's Mexican Restaurant\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.893258</td>\n",
       "      <td>-NmL2ZMmxc7b6_Gmr0_43g</td>\n",
       "      <td>3</td>\n",
       "      <td>2.826069</td>\n",
       "      <td>I have been going past this place since I was ...</td>\n",
       "      <td>[going, past, place, kid, means, business, yea...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4245061</td>\n",
       "      <td>-1xCh7Cocn6IwFzhELyohA</td>\n",
       "      <td>\"Jose' and Tony's Mexican Restaurant\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.893258</td>\n",
       "      <td>uTBeZCW6nSsuPgqScbf-0Q</td>\n",
       "      <td>1</td>\n",
       "      <td>1.870071</td>\n",
       "      <td>Stopped in for a quick lunch and was very disa...</td>\n",
       "      <td>[stopped, quick, lunch, disappointed, bartende...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4245064</td>\n",
       "      <td>-1xCh7Cocn6IwFzhELyohA</td>\n",
       "      <td>\"Jose' and Tony's Mexican Restaurant\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.893258</td>\n",
       "      <td>iCXJ3gO2GhopYHmfmnktfw</td>\n",
       "      <td>4</td>\n",
       "      <td>3.730689</td>\n",
       "      <td>Jose and Tony's is a great spot to grab some t...</td>\n",
       "      <td>[jose, tony, great, spot, grab, tacos, beers, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3396098</td>\n",
       "      <td>-2EAyppKR_2xuLyvJZEbRQ</td>\n",
       "      <td>\"Burrito Burrito\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.217652</td>\n",
       "      <td>D7IO6XICsQ9D7Us8ymbyAw</td>\n",
       "      <td>4</td>\n",
       "      <td>4.253856</td>\n",
       "      <td>Very good and friendly ordering service from t...</td>\n",
       "      <td>[good, friendly, ordering, service, man, charg...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3396103</td>\n",
       "      <td>-2EAyppKR_2xuLyvJZEbRQ</td>\n",
       "      <td>\"Burrito Burrito\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.217652</td>\n",
       "      <td>VLlg4rAuHODidY143sf2Pg</td>\n",
       "      <td>2</td>\n",
       "      <td>3.547741</td>\n",
       "      <td>Had the surf and turf burrito bowl today. Alth...</td>\n",
       "      <td>[surf, turf, burrito, bowl, today, shrimp, lov...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3396105</td>\n",
       "      <td>-2EAyppKR_2xuLyvJZEbRQ</td>\n",
       "      <td>\"Burrito Burrito\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.217652</td>\n",
       "      <td>WeVkkF5L39888IPPlRhNpg</td>\n",
       "      <td>4</td>\n",
       "      <td>3.660095</td>\n",
       "      <td>I don't understand how this place doesn't have...</td>\n",
       "      <td>[understand, place, reviews, good, reviews, ma...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3396109</td>\n",
       "      <td>-2EAyppKR_2xuLyvJZEbRQ</td>\n",
       "      <td>\"Burrito Burrito\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.217652</td>\n",
       "      <td>FykmLnIuh6oPaSPJ3RLB_A</td>\n",
       "      <td>1</td>\n",
       "      <td>1.408917</td>\n",
       "      <td>Absolutely the worst soft tacos we have ever h...</td>\n",
       "      <td>[absolutely, worst, soft, tacos, taco, bell, h...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4433413</td>\n",
       "      <td>-2isRNVb6PDuBagELL5EBw</td>\n",
       "      <td>\"Taco Bell\"</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.982036</td>\n",
       "      <td>Tp2ueTirl1lV6EvhPcc-5Q</td>\n",
       "      <td>1</td>\n",
       "      <td>2.758293</td>\n",
       "      <td>They used to exceptional service! Now they lac...</td>\n",
       "      <td>[exceptional, service, lack, lazy, build, toda...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4433415</td>\n",
       "      <td>-2isRNVb6PDuBagELL5EBw</td>\n",
       "      <td>\"Taco Bell\"</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.982036</td>\n",
       "      <td>Tmw8c42MbUC968uKahphAw</td>\n",
       "      <td>5</td>\n",
       "      <td>3.495788</td>\n",
       "      <td>I only come here once in a while, but I have r...</td>\n",
       "      <td>[come, received, great, customer, service, tim...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4433419</td>\n",
       "      <td>-2isRNVb6PDuBagELL5EBw</td>\n",
       "      <td>\"Taco Bell\"</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.982036</td>\n",
       "      <td>Q6E66wyWs8OOC_KxDLT4MQ</td>\n",
       "      <td>3</td>\n",
       "      <td>2.692027</td>\n",
       "      <td>The \"fast\" in fast food apparently doesn't app...</td>\n",
       "      <td>[fast, fast, food, apparently, apply, way, hom...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5256829</td>\n",
       "      <td>-2q4dnUw0gGJniGW2aPamQ</td>\n",
       "      <td>\"Fiesta Ranchera\"</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.850283</td>\n",
       "      <td>6MDjqs8QE2A_TA0CYi8-UQ</td>\n",
       "      <td>1</td>\n",
       "      <td>1.850283</td>\n",
       "      <td>Me and my girlfriend walked into this place af...</td>\n",
       "      <td>[girlfriend, walked, place, mary, anns, diner,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1372719</td>\n",
       "      <td>-3zffZUHoY8bQjGfPSoBKQ</td>\n",
       "      <td>\"Michael Mina\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.140460</td>\n",
       "      <td>smcntJvBuWr_J_NhlSyHeA</td>\n",
       "      <td>2</td>\n",
       "      <td>2.140460</td>\n",
       "      <td>Don't get me wrong, the quality is superb at t...</td>\n",
       "      <td>[wrong, quality, superb, restaurant, service, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5151658</td>\n",
       "      <td>-4TVAE4KcLWVSXO2rOsVEg</td>\n",
       "      <td>\"Pitaya Maya\"</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.898906</td>\n",
       "      <td>fzxwe76njDWbF0ZiJoP5Lw</td>\n",
       "      <td>4</td>\n",
       "      <td>3.898906</td>\n",
       "      <td>While almost everything was amazing, there was...</td>\n",
       "      <td>[amazing, flaw, main, meal, steak, tacos, blan...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1697509</td>\n",
       "      <td>-5L8zOxibac-vBrsYtxXbQ</td>\n",
       "      <td>\"Ed's Tavern\"</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.716800</td>\n",
       "      <td>E43QxgV87Ij6KxMCHcijKw</td>\n",
       "      <td>4</td>\n",
       "      <td>4.304706</td>\n",
       "      <td>Like to play games? Watch sports? Eat? Drink b...</td>\n",
       "      <td>[like, play, games, watch, sports, eat, drink,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1697524</td>\n",
       "      <td>-5L8zOxibac-vBrsYtxXbQ</td>\n",
       "      <td>\"Ed's Tavern\"</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.716800</td>\n",
       "      <td>Ry1O_KXZHGRI8g5zBR3IcQ</td>\n",
       "      <td>4</td>\n",
       "      <td>3.128894</td>\n",
       "      <td>Gave trivia night another shot at Ed's... I th...</td>\n",
       "      <td>[gave, trivia, night, shot, think, time, trivi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4600585</td>\n",
       "      <td>-5XuRAfrjEiMN77J4gMQZQ</td>\n",
       "      <td>\"Berrybrook Farm Natural Foods\"</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.824137</td>\n",
       "      <td>IJvtTTMvLFIDBBoiqtm6Uw</td>\n",
       "      <td>5</td>\n",
       "      <td>3.824137</td>\n",
       "      <td>This place is an absolute GEM! I constantly he...</td>\n",
       "      <td>[place, absolute, gem, constantly, hear, frien...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4722831</td>\n",
       "      <td>-5dd-RjojGVK9hjAMCXVZw</td>\n",
       "      <td>\"La Fiesta Mexican Restaurant\"</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.943541</td>\n",
       "      <td>ymi0YEAIyZm9DN0H-OBb5A</td>\n",
       "      <td>2</td>\n",
       "      <td>1.125818</td>\n",
       "      <td>Our waiter was friendly, but very scatter brai...</td>\n",
       "      <td>[waiter, friendly, scatter, brained, flag, sod...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    business_id                          business_name  \\\n",
       "3784439  --FBCX-N37CMYDfs790Bnw        \"The Bar At Bermuda & St. Rose\"   \n",
       "4737409  --GM_ORV2cYS-h38DSaCLw                          \"Mm Mm Pizza\"   \n",
       "907246   --cZ6Hhc9F7VkKXxHMVZSQ                              \"Pio Pio\"   \n",
       "907424   --cZ6Hhc9F7VkKXxHMVZSQ                              \"Pio Pio\"   \n",
       "1938376  -01XupAWZEXbdNbxNg5mEg        \"18 Degrees Neighborhood Grill\"   \n",
       "3830183  -092wE7j5HZOogMLAh40zA                            \"Wong's Jr\"   \n",
       "3889700  -0t6o9LXMVQ3aV8CHhRTnA         \"AZ International Marketplace\"   \n",
       "1668176  -0tgMGl7D9B10YjSN2ujLA                             \"Dubliner\"   \n",
       "2496748  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496757  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496811  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496813  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496828  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496839  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496857  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496874  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496877  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496878  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496879  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496886  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496888  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496895  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "2496900  -1VaIJza42Hjev6ukacCNg            \"Rio Mirage Cafe Y Cantina\"   \n",
       "4446722  -1mjIwXWiI1uzy-8nGkdkw                 \"Bridal Fashion Debut\"   \n",
       "4875759  -1uVyyy3UXNA9WoPucNniA                    \"La Tapatia Market\"   \n",
       "4875761  -1uVyyy3UXNA9WoPucNniA                    \"La Tapatia Market\"   \n",
       "4875773  -1uVyyy3UXNA9WoPucNniA                    \"La Tapatia Market\"   \n",
       "4245032  -1xCh7Cocn6IwFzhELyohA  \"Jose' and Tony's Mexican Restaurant\"   \n",
       "4245033  -1xCh7Cocn6IwFzhELyohA  \"Jose' and Tony's Mexican Restaurant\"   \n",
       "4245038  -1xCh7Cocn6IwFzhELyohA  \"Jose' and Tony's Mexican Restaurant\"   \n",
       "4245049  -1xCh7Cocn6IwFzhELyohA  \"Jose' and Tony's Mexican Restaurant\"   \n",
       "4245053  -1xCh7Cocn6IwFzhELyohA  \"Jose' and Tony's Mexican Restaurant\"   \n",
       "4245056  -1xCh7Cocn6IwFzhELyohA  \"Jose' and Tony's Mexican Restaurant\"   \n",
       "4245058  -1xCh7Cocn6IwFzhELyohA  \"Jose' and Tony's Mexican Restaurant\"   \n",
       "4245061  -1xCh7Cocn6IwFzhELyohA  \"Jose' and Tony's Mexican Restaurant\"   \n",
       "4245064  -1xCh7Cocn6IwFzhELyohA  \"Jose' and Tony's Mexican Restaurant\"   \n",
       "3396098  -2EAyppKR_2xuLyvJZEbRQ                      \"Burrito Burrito\"   \n",
       "3396103  -2EAyppKR_2xuLyvJZEbRQ                      \"Burrito Burrito\"   \n",
       "3396105  -2EAyppKR_2xuLyvJZEbRQ                      \"Burrito Burrito\"   \n",
       "3396109  -2EAyppKR_2xuLyvJZEbRQ                      \"Burrito Burrito\"   \n",
       "4433413  -2isRNVb6PDuBagELL5EBw                            \"Taco Bell\"   \n",
       "4433415  -2isRNVb6PDuBagELL5EBw                            \"Taco Bell\"   \n",
       "4433419  -2isRNVb6PDuBagELL5EBw                            \"Taco Bell\"   \n",
       "5256829  -2q4dnUw0gGJniGW2aPamQ                      \"Fiesta Ranchera\"   \n",
       "1372719  -3zffZUHoY8bQjGfPSoBKQ                         \"Michael Mina\"   \n",
       "5151658  -4TVAE4KcLWVSXO2rOsVEg                          \"Pitaya Maya\"   \n",
       "1697509  -5L8zOxibac-vBrsYtxXbQ                          \"Ed's Tavern\"   \n",
       "1697524  -5L8zOxibac-vBrsYtxXbQ                          \"Ed's Tavern\"   \n",
       "4600585  -5XuRAfrjEiMN77J4gMQZQ        \"Berrybrook Farm Natural Foods\"   \n",
       "4722831  -5dd-RjojGVK9hjAMCXVZw         \"La Fiesta Mexican Restaurant\"   \n",
       "\n",
       "         yelp_store_rating  adjusted_store_rating                 user_id  \\\n",
       "3784439                3.5               4.535591  -FcEjpQyBbE7b0BU19lErQ   \n",
       "4737409                4.0               3.899200  ZjHDoLXzLcj023N1a7WTww   \n",
       "907246                 4.0               4.414962  haEqV41MSa3d4KFuMia76w   \n",
       "907424                 4.0               4.414962  MvblGTq2F6CiWd83mccnPA   \n",
       "1938376                3.0               3.537123  -CVmjsibfqwcOdNRQtaRLA   \n",
       "3830183                3.5               3.163127  IC7NLIeWhS45_aEE_8aVUg   \n",
       "3889700                3.5               4.497676  oUst55rUuv2nKEQ0FgJ5GQ   \n",
       "1668176                3.5               4.221543  tfBnJCPMpI989z6N5vPPug   \n",
       "2496748                4.0               3.841703  SUMR4k6sqSFFrBpMKq0HWg   \n",
       "2496757                4.0               3.841703  vRhszJeS0GMLvMDT8eC3OQ   \n",
       "2496811                4.0               3.841703  nbUVwIWxtheGlDLdM8AEjA   \n",
       "2496813                4.0               3.841703  JxQOKTyANMTOlVtfmiqXsQ   \n",
       "2496828                4.0               3.841703  j0Un8DiHkzhf5oaOj99RzQ   \n",
       "2496839                4.0               3.841703  YwTA18gfITTzJ1EvfMzAmg   \n",
       "2496857                4.0               3.841703  UmXzwFM2OkZHWJ5cJZlqkg   \n",
       "2496874                4.0               3.841703  13F6gDJ40Ylm6ZBqaDjBYA   \n",
       "2496877                4.0               3.841703  nT6f_etGqvkoneKKxDnpIg   \n",
       "2496878                4.0               3.841703  mhArWI_0mvu3S4FiQcZ0nw   \n",
       "2496879                4.0               3.841703  _iMA7tOMdrHBDvzbWr-k4g   \n",
       "2496886                4.0               3.841703  MGpRmnbDX07EW_aQXn2TYg   \n",
       "2496888                4.0               3.841703  GQuQ_x_ZUnQjjTDfOFQmUA   \n",
       "2496895                4.0               3.841703  DWz6gCALJMU-LiJPo8x7ng   \n",
       "2496900                4.0               3.841703  eAJ3Ip0vh-zuk_BmcmchYA   \n",
       "4446722                4.0               3.928270  nf7dY3evihisaWf1xgKKwQ   \n",
       "4875759                5.0               4.545881  wsXtgONpRltBnNxCI8KpTQ   \n",
       "4875761                5.0               4.545881  lXlEUF5EA4PDjtLhT2Iu8w   \n",
       "4875773                5.0               4.545881  IXHU--FVkanfIWP82aBCBA   \n",
       "4245032                2.5               2.893258  Bf3hX9Y3W00T2d0nSB_Crg   \n",
       "4245033                2.5               2.893258  nbVhicAu_-rOrXKh7xV2dA   \n",
       "4245038                2.5               2.893258  WoKCLSctS7G2547xKcED-Q   \n",
       "4245049                2.5               2.893258  7LMYtJ7xjMEpmGHJzQGFjg   \n",
       "4245053                2.5               2.893258  YopTJyzIiL6-3piLryzFrg   \n",
       "4245056                2.5               2.893258  rCWrxuRC8_pfagpchtHp6A   \n",
       "4245058                2.5               2.893258  -NmL2ZMmxc7b6_Gmr0_43g   \n",
       "4245061                2.5               2.893258  uTBeZCW6nSsuPgqScbf-0Q   \n",
       "4245064                2.5               2.893258  iCXJ3gO2GhopYHmfmnktfw   \n",
       "3396098                2.5               3.217652  D7IO6XICsQ9D7Us8ymbyAw   \n",
       "3396103                2.5               3.217652  VLlg4rAuHODidY143sf2Pg   \n",
       "3396105                2.5               3.217652  WeVkkF5L39888IPPlRhNpg   \n",
       "3396109                2.5               3.217652  FykmLnIuh6oPaSPJ3RLB_A   \n",
       "4433413                3.0               2.982036  Tp2ueTirl1lV6EvhPcc-5Q   \n",
       "4433415                3.0               2.982036  Tmw8c42MbUC968uKahphAw   \n",
       "4433419                3.0               2.982036  Q6E66wyWs8OOC_KxDLT4MQ   \n",
       "5256829                2.0               1.850283  6MDjqs8QE2A_TA0CYi8-UQ   \n",
       "1372719                4.0               2.140460  smcntJvBuWr_J_NhlSyHeA   \n",
       "5151658                2.5               3.898906  fzxwe76njDWbF0ZiJoP5Lw   \n",
       "1697509                3.5               3.716800  E43QxgV87Ij6KxMCHcijKw   \n",
       "1697524                3.5               3.716800  Ry1O_KXZHGRI8g5zBR3IcQ   \n",
       "4600585                4.0               3.824137  IJvtTTMvLFIDBBoiqtm6Uw   \n",
       "4722831                3.0               2.943541  ymi0YEAIyZm9DN0H-OBb5A   \n",
       "\n",
       "         original_yelp_user_rating  adjusted_sentiment_rating  \\\n",
       "3784439                          5                   4.535591   \n",
       "4737409                          4                   3.899200   \n",
       "907246                           4                   3.956057   \n",
       "907424                           4                   4.873866   \n",
       "1938376                          3                   3.537123   \n",
       "3830183                          4                   3.163127   \n",
       "3889700                          4                   4.497676   \n",
       "1668176                          5                   4.221543   \n",
       "2496748                          3                   3.971430   \n",
       "2496757                          4                   3.690165   \n",
       "2496811                          5                   3.988934   \n",
       "2496813                          5                   4.893775   \n",
       "2496828                          4                   3.608050   \n",
       "2496839                          5                   4.178485   \n",
       "2496857                          3                   3.889293   \n",
       "2496874                          4                   4.430749   \n",
       "2496877                          3                   3.321037   \n",
       "2496878                          2                   1.802178   \n",
       "2496879                          5                   4.073761   \n",
       "2496886                          5                   4.619903   \n",
       "2496888                          4                   3.545183   \n",
       "2496895                          4                   3.965803   \n",
       "2496900                          3                   3.646792   \n",
       "4446722                          4                   3.928270   \n",
       "4875759                          5                   4.338726   \n",
       "4875761                          5                   4.319883   \n",
       "4875773                          5                   4.979033   \n",
       "4245032                          1                   2.344371   \n",
       "4245033                          2                   2.994006   \n",
       "4245038                          3                   3.551554   \n",
       "4245049                          2                   1.814393   \n",
       "4245053                          4                   3.927350   \n",
       "4245056                          2                   2.980823   \n",
       "4245058                          3                   2.826069   \n",
       "4245061                          1                   1.870071   \n",
       "4245064                          4                   3.730689   \n",
       "3396098                          4                   4.253856   \n",
       "3396103                          2                   3.547741   \n",
       "3396105                          4                   3.660095   \n",
       "3396109                          1                   1.408917   \n",
       "4433413                          1                   2.758293   \n",
       "4433415                          5                   3.495788   \n",
       "4433419                          3                   2.692027   \n",
       "5256829                          1                   1.850283   \n",
       "1372719                          2                   2.140460   \n",
       "5151658                          4                   3.898906   \n",
       "1697509                          4                   4.304706   \n",
       "1697524                          4                   3.128894   \n",
       "4600585                          5                   3.824137   \n",
       "4722831                          2                   1.125818   \n",
       "\n",
       "                                      original_text_review  \\\n",
       "3784439  We've been coming here for years. The staff is...   \n",
       "4737409  Ordered several pizzas for a work party..chees...   \n",
       "907246   I was busy cooking dinner when my friend calle...   \n",
       "907424   Great food. Chicken, rice and beans, tacos, pl...   \n",
       "1938376  Went here last week with the husband for dinne...   \n",
       "3830183  This place is my favorite Chinese food place w...   \n",
       "3889700  Wow ... what a huge market indeed. This is the...   \n",
       "1668176  Shepards pie and taco Tuesday are definitely j...   \n",
       "2496748  The food is great, shrimp cocktails have an au...   \n",
       "2496757  We took a break from the Christmas shopping cr...   \n",
       "2496811  On our way to Sedona and used yelp to determin...   \n",
       "2496813  We had the Mahi Mahi fish tacos.  They were am...   \n",
       "2496828  I ordered the Chili Relleno combination platte...   \n",
       "2496839  We have eaten here once, and the experience wa...   \n",
       "2496857  While I don't think there is a river or a mira...   \n",
       "2496874  Came here with my boyfriend, we have been look...   \n",
       "2496877  We went here for dinner June 2nd to celebrate ...   \n",
       "2496878  Not what it used to be.  This was the third ti...   \n",
       "2496879  Ok, Midwest guys, best ever Mexican.  Why?  Au...   \n",
       "2496886  Awesome.  Since I moved to AZ. from TX. I have...   \n",
       "2496888  Went in this past Sunday about 10:30. We were ...   \n",
       "2496895  We went at the height of the dinner rush on Fr...   \n",
       "2496900  This place is a good lunch break spot if you a...   \n",
       "4446722  hmm, hopefully I am reviewing the right thing....   \n",
       "4875759  My dad took me in for lunch. He was there 2 we...   \n",
       "4875761  I tried the carne asada tacos and the carnitas...   \n",
       "4875773  Went in and got a taco combo and some other st...   \n",
       "4245032  This is a tale of two teachers, a married coup...   \n",
       "4245033  I have been here a number of times, mostly bec...   \n",
       "4245038  It hurts my heart a little to see all the one ...   \n",
       "4245049  So this place. Have been driving by it for 6 m...   \n",
       "4245053  I remember the day, years ago, when I would ex...   \n",
       "4245056  In business for longer than I have been on thi...   \n",
       "4245058  I have been going past this place since I was ...   \n",
       "4245061  Stopped in for a quick lunch and was very disa...   \n",
       "4245064  Jose and Tony's is a great spot to grab some t...   \n",
       "3396098  Very good and friendly ordering service from t...   \n",
       "3396103  Had the surf and turf burrito bowl today. Alth...   \n",
       "3396105  I don't understand how this place doesn't have...   \n",
       "3396109  Absolutely the worst soft tacos we have ever h...   \n",
       "4433413  They used to exceptional service! Now they lac...   \n",
       "4433415  I only come here once in a while, but I have r...   \n",
       "4433419  The \"fast\" in fast food apparently doesn't app...   \n",
       "5256829  Me and my girlfriend walked into this place af...   \n",
       "1372719  Don't get me wrong, the quality is superb at t...   \n",
       "5151658  While almost everything was amazing, there was...   \n",
       "1697509  Like to play games? Watch sports? Eat? Drink b...   \n",
       "1697524  Gave trivia night another shot at Ed's... I th...   \n",
       "4600585  This place is an absolute GEM! I constantly he...   \n",
       "4722831  Our waiter was friendly, but very scatter brai...   \n",
       "\n",
       "                                          tokenized_review  \n",
       "3784439  [coming, years, staff, great, recently, added,...  \n",
       "4737409  [ordered, pizzas, work, party, cheeseburger, b...  \n",
       "907246   [busy, cooking, dinner, friend, called, said, ...  \n",
       "907424   [great, food, chicken, rice, beans, tacos, pla...  \n",
       "1938376  [went, week, husband, dinner, coupon, saw, fri...  \n",
       "3830183  [place, favorite, chinese, food, place, miles,...  \n",
       "3889700  [wow, huge, market, sister, store, smaller, me...  \n",
       "1668176  [shepards, pie, taco, tuesday, definitely, cou...  \n",
       "2496748  [food, great, shrimp, cocktails, authentic, fl...  \n",
       "2496757  [took, break, christmas, shopping, craziness, ...  \n",
       "2496811  [way, sedona, yelp, determine, stop, easy, loc...  \n",
       "2496813  [mahi, mahi, fish, tacos, amazing, loved, sals...  \n",
       "2496828  [ordered, chili, relleno, combination, platter...  \n",
       "2496839  [eaten, experience, great, definitely, hidden,...  \n",
       "2496857  [think, river, mirage, near, place, large, pud...  \n",
       "2496874  [came, boyfriend, looking, good, mexican, rest...  \n",
       "2496877  [went, dinner, june, celebrate, friend, birthd...  \n",
       "2496878  [time, season, ate, sure, returned, encountere...  \n",
       "2496879  [midwest, guys, best, mexican, authentic, loca...  \n",
       "2496886  [awesome, moved, searching, good, mexican, foo...  \n",
       "2496888  [went, past, sunday, seated, promptly, friendl...  \n",
       "2496895  [went, height, dinner, rush, friday, wanted, d...  \n",
       "2496900  [place, good, lunch, break, spot, lunch, break...  \n",
       "4446722  [hmm, hopefully, reviewing, right, thing, sure...  \n",
       "4875759  [dad, took, lunch, weeks, ago, couldn, stop, t...  \n",
       "4875761  [tried, carne, asada, tacos, carnitas, tacos, ...  \n",
       "4875773  [went, got, taco, combo, stuff, amazing, fresh...  \n",
       "4245032  [tale, teachers, married, couple, looking, che...  \n",
       "4245033  [number, times, convenient, near, friends, add...  \n",
       "4245038  [hurts, heart, little, star, reviews, jose, to...  \n",
       "4245049  [place, driving, months, finally, inside, plac...  \n",
       "4245053  [remember, day, years, ago, excitedly, run, st...  \n",
       "4245056  [business, longer, earthly, plane, jose, tony,...  \n",
       "4245058  [going, past, place, kid, means, business, yea...  \n",
       "4245061  [stopped, quick, lunch, disappointed, bartende...  \n",
       "4245064  [jose, tony, great, spot, grab, tacos, beers, ...  \n",
       "3396098  [good, friendly, ordering, service, man, charg...  \n",
       "3396103  [surf, turf, burrito, bowl, today, shrimp, lov...  \n",
       "3396105  [understand, place, reviews, good, reviews, ma...  \n",
       "3396109  [absolutely, worst, soft, tacos, taco, bell, h...  \n",
       "4433413  [exceptional, service, lack, lazy, build, toda...  \n",
       "4433415  [come, received, great, customer, service, tim...  \n",
       "4433419  [fast, fast, food, apparently, apply, way, hom...  \n",
       "5256829  [girlfriend, walked, place, mary, anns, diner,...  \n",
       "1372719  [wrong, quality, superb, restaurant, service, ...  \n",
       "5151658  [amazing, flaw, main, meal, steak, tacos, blan...  \n",
       "1697509  [like, play, games, watch, sports, eat, drink,...  \n",
       "1697524  [gave, trivia, night, shot, think, time, trivi...  \n",
       "4600585  [place, absolute, gem, constantly, hear, frien...  \n",
       "4722831  [waiter, friendly, scatter, brained, flag, sod...  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tacos_df.head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "business_id                                             -6tvduBzjLI1ISfs3F_qTg\n",
       "business_name                                             \"Joyride Taco House\"\n",
       "yelp_store_rating                                                            4\n",
       "adjusted_store_rating                                                  3.80471\n",
       "user_id                                                 yJaqAq9oVLHrzY_ZHUZyYw\n",
       "original_yelp_user_rating                                                    4\n",
       "adjusted_sentiment_rating                                              4.45047\n",
       "original_text_review         Love that Gilbert AZ is coming up in the world...\n",
       "tokenized_review             [love, gilbert, coming, world, moved, chandler...\n",
       "Name: 673532, dtype: object"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tacos_df.iloc[420]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' Create a local JSON file that we can send to Backend '"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''' Create a local JSON file that we can send to Backend '''\n",
    "#tacos_df.to_json('adjusted_reviews.json', orient='records', lines=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.008528909341936064"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(tacos_df['adjusted_sentiment_rating'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.999826596171201"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(tacos_df['adjusted_sentiment_rating'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc417c440b8>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x936 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "''' The distribution of the adjusted sentiment ratings w/ outliers removed '''\n",
    "sns.distplot(tacos_df['adjusted_sentiment_rating'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4.52335091, 4.43520618, 4.73948655, ..., 3.98861992, 2.20334671,\n",
       "       3.47796396])"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4.55734712])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.predict(fake_ass_review)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.03043175])"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.predict(['''\n",
    "Fuck this place. Awful. Horrible. Beautiful.\n",
    "'''])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' \\nFrom here, make a new dataframe that includes the old AND new stars, and then can run \\nan XGB regressor on all the extra data(the text data and sentiment is summed up with the\\nmodified sentiemtn rating) Then the final regressor rating will be... THE THING \\n'"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''' \n",
    "From here, make a new dataframe that includes the old AND new stars, and then can run \n",
    "an XGB regressor on all the extra data(the text data and sentiment is summed up with the\n",
    "modified sentiemtn rating) Then the final regressor rating will be... THE THING \n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Network To go for very high accuracy \n",
    "So will need a Neural Net that... Does a Regression on Sentiment Analysis. (these values could be across a large range, would simply need to add a scale down component to get it between1-5 star ratings.  \n",
    "\n",
    "LSTM or CNN seem to be the ideal candidates here. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## LSTM Multi Class Classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = reviews_df['tokens']\n",
    "y_train = np.array(reviews_df['stars'])\n",
    "x_test = X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5, 3, 2, ..., 4, 5, 4])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(112220,)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews_df['tokens'].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "tokenizer = Tokenizer(num_words = 20000)\n",
    "tokenizer.fit_on_texts(reviews_df['tokens'])\n",
    "\n",
    "sequences = tokenizer.texts_to_sequences(reviews_df['tokens'])\n",
    "data = pad_sequences(sequences, maxlen=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "tokenizer = Tokenizer(num_words = 20000)\n",
    "tokenizer.fit_on_texts(x_test['tokens'])\n",
    "\n",
    "sequences = tokenizer.texts_to_sequences(x_test['tokens'])\n",
    "x_test = pad_sequences(sequences, maxlen=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(112220, 100)\n"
     ]
    }
   ],
   "source": [
    "print(data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9759, 100)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[    0,     0,     0, ...,     7,    18,    29],\n",
       "       [    0,     0,     0, ...,     4,   240,   623],\n",
       "       [    0,     0,  1642, ...,     4,    61,    78],\n",
       "       ...,\n",
       "       [    0,     0,     0, ..., 10520,  1832,  2375],\n",
       "       [    0,     0,     0, ...,  5817,     6,   570],\n",
       "       [    0,     0,     0, ...,     7,   488,   431]], dtype=int32)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(112220,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([5, 3, 2, ..., 4, 5, 4])"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(y_train.T.shape)\n",
    "y_train.T "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5, 3, 2, ..., 4, 5, 4])"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "def encode(data):\n",
    "    print('Shape of data (BEFORE encode): %s' % str(data.shape))\n",
    "    encoded = to_categorical(data)\n",
    "    print('Shape of data (AFTER  encode): %s\\n' % str(encoded.shape))\n",
    "    return encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of data (BEFORE encode): (112220,)\n",
      "Shape of data (AFTER  encode): (112220, 6)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_train = encode(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 1., 0., 0.],\n",
       "       [0., 0., 1., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., 0., 1., 0.],\n",
       "       [0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0., 1., 0.]], dtype=float32)"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding (Embedding)        (None, None, 100)         2000000   \n",
      "_________________________________________________________________\n",
      "lstm (LSTM)                  (None, 100)               80400     \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 6)                 606       \n",
      "=================================================================\n",
      "Total params: 2,081,006\n",
      "Trainable params: 2,081,006\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Embedding(20000, 100))\n",
    "model.add(LSTM(100, dropout=.2, recurrent_dropout=.2))\n",
    "model.add(Dense(6, activation='softmax'))\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 89776 samples, validate on 22444 samples\n",
      "Epoch 1/10\n",
      "89776/89776 [==============================] - 19s 214us/sample - loss: 1.3239 - accuracy: 0.4286 - val_loss: 1.0329 - val_accuracy: 0.5267\n",
      "Epoch 2/10\n",
      "89776/89776 [==============================] - 16s 176us/sample - loss: 0.9676 - accuracy: 0.5639 - val_loss: 0.9150 - val_accuracy: 0.5907\n",
      "Epoch 3/10\n",
      "89776/89776 [==============================] - 16s 175us/sample - loss: 0.8748 - accuracy: 0.6145 - val_loss: 0.8901 - val_accuracy: 0.6067\n",
      "Epoch 4/10\n",
      "89776/89776 [==============================] - 16s 179us/sample - loss: 0.8219 - accuracy: 0.6405 - val_loss: 0.8991 - val_accuracy: 0.6066\n",
      "Epoch 5/10\n",
      "89776/89776 [==============================] - 16s 180us/sample - loss: 0.7869 - accuracy: 0.6591 - val_loss: 0.8963 - val_accuracy: 0.6100\n",
      "Epoch 6/10\n",
      "89776/89776 [==============================] - 16s 176us/sample - loss: 0.7549 - accuracy: 0.6761 - val_loss: 0.9102 - val_accuracy: 0.6097\n",
      "Epoch 7/10\n",
      "89776/89776 [==============================] - 16s 177us/sample - loss: 0.7247 - accuracy: 0.6924 - val_loss: 0.9250 - val_accuracy: 0.6004\n",
      "Epoch 8/10\n",
      "89776/89776 [==============================] - 16s 176us/sample - loss: 0.6975 - accuracy: 0.7081 - val_loss: 0.9483 - val_accuracy: 0.6004\n",
      "Epoch 9/10\n",
      "89776/89776 [==============================] - 16s 177us/sample - loss: 0.6730 - accuracy: 0.7217 - val_loss: 0.9625 - val_accuracy: 0.5968\n",
      "Epoch 10/10\n",
      "89776/89776 [==============================] - 16s 177us/sample - loss: 0.6491 - accuracy: 0.7329 - val_loss: 0.9988 - val_accuracy: 0.5927\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7fc3dbca7080>"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "model.fit(data, y_train, validation_split=.2, epochs=10, batch_size=1024)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.8428500e-04, 8.3518313e-04, 4.2487804e-02, 9.0378892e-01,\n",
       "        4.6926040e-02, 5.7777539e-03],\n",
       "       [2.1566143e-02, 7.4706972e-02, 4.3621514e-02, 2.8015088e-02,\n",
       "        1.6603291e-01, 6.6605735e-01],\n",
       "       [9.6663350e-04, 1.5034898e-03, 1.3763450e-02, 1.2001817e-01,\n",
       "        7.4134690e-01, 1.2240134e-01],\n",
       "       ...,\n",
       "       [1.6651581e-03, 6.6785943e-03, 3.8938664e-02, 3.3833972e-01,\n",
       "        4.6641007e-01, 1.4796780e-01],\n",
       "       [7.7630648e-05, 1.7577619e-04, 3.2140483e-04, 2.1769106e-03,\n",
       "        1.2377879e-01, 8.7346947e-01],\n",
       "       [8.9170188e-03, 4.5926914e-02, 9.4164655e-02, 1.8558855e-01,\n",
       "        2.1995738e-01, 4.4544554e-01]], dtype=float32)"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id                                   g4ptSwb0C1b7PYDo8lHDpQ\n",
       "business_id                               bMSiHjs2fbKbBNPyuTwhHA\n",
       "stars                                                          4\n",
       "text           I'm gonna say four stars because the current o...\n",
       "name                                              \"Coastal Taco\"\n",
       "rating                                                       2.5\n",
       "tokens         [gonna, stars, current, overall, warranted, pr...\n",
       "Name: 2390802, dtype: object"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.iloc[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Covolutional Neural Network w/ LSTM Multiclass Classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_conv = Sequential()\n",
    "model_conv.add(Embedding(20000, 200))\n",
    "model_conv.add(Dropout(0.2)) \n",
    "model_conv.add(Conv1D(128, 6, activation='relu'))\n",
    "model_conv.add(MaxPooling1D(pool_size=4))\n",
    "model_conv.add(LSTM(200))\n",
    "model_conv.add(Dense(6, activation='softmax'))\n",
    "model_conv.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 102681 samples, validate on 9539 samples\n",
      "Epoch 1/10\n",
      "102681/102681 [==============================] - 21s 203us/sample - loss: 1.2787 - accuracy: 0.4409 - val_loss: 0.9773 - val_accuracy: 0.5539\n",
      "Epoch 2/10\n",
      "102681/102681 [==============================] - 15s 150us/sample - loss: 0.9060 - accuracy: 0.5955 - val_loss: 0.9037 - val_accuracy: 0.6045\n",
      "Epoch 3/10\n",
      "102681/102681 [==============================] - 15s 150us/sample - loss: 0.8260 - accuracy: 0.6370 - val_loss: 0.9101 - val_accuracy: 0.5972\n",
      "Epoch 4/10\n",
      "102681/102681 [==============================] - 16s 151us/sample - loss: 0.7881 - accuracy: 0.6562 - val_loss: 0.9291 - val_accuracy: 0.5883\n",
      "Epoch 5/10\n",
      "102681/102681 [==============================] - 15s 150us/sample - loss: 0.7540 - accuracy: 0.6749 - val_loss: 0.9418 - val_accuracy: 0.5966\n",
      "Epoch 6/10\n",
      "102681/102681 [==============================] - 15s 149us/sample - loss: 0.7202 - accuracy: 0.6937 - val_loss: 0.9599 - val_accuracy: 0.5919\n",
      "Epoch 7/10\n",
      "102681/102681 [==============================] - 15s 150us/sample - loss: 0.6831 - accuracy: 0.7138 - val_loss: 1.0149 - val_accuracy: 0.5732\n",
      "Epoch 8/10\n",
      "102681/102681 [==============================] - 15s 149us/sample - loss: 0.6387 - accuracy: 0.7381 - val_loss: 1.0567 - val_accuracy: 0.5677\n",
      "Epoch 9/10\n",
      "102681/102681 [==============================] - 15s 150us/sample - loss: 0.5857 - accuracy: 0.7628 - val_loss: 1.1058 - val_accuracy: 0.5784\n",
      "Epoch 10/10\n",
      "102681/102681 [==============================] - 16s 151us/sample - loss: 0.5131 - accuracy: 0.7986 - val_loss: 1.2259 - val_accuracy: 0.5635\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7fc38fd95438>"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_conv.fit(data, y_train,  validation_split=.085, epochs=10, batch_size=2048)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = model_conv.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3.4540796e-04, 2.4558688e-03, 3.2650495e-03, 1.7658016e-02,\n",
       "       1.1955973e-01, 8.5671586e-01], dtype=float32)"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[9758]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9759, 100)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perceptron Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
